/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 17.01.2022 23:20:54

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 4576;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[34];
TfLiteEvalTensor tflEvalTensors[34];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[16];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,845 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 128, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[16] = { -16026, 23610, -15158, 17268, -20128, 13070, 22712, -964, -20273, 13020, 13737, 5741, 11125, 9095, 14553, 10472, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<16, float> quant2_scale = { 16, { 1.2178031283838209e-05, 1.1495671060401946e-05, 1.2848101505369414e-05, 1.0232539352728054e-05, 1.0848423698917031e-05, 9.1929514383082278e-06, 1.6161457097041421e-05, 1.1816249752882868e-05, 1.0416774784971494e-05, 1.5539882951998152e-05, 1.0295083484379575e-05, 1.4326996279123705e-05, 1.0025742994912434e-05, 1.5757850633235648e-05, 1.0175140232604463e-05, 1.036365756590385e-05, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[32] = { -3261, -2280, -3402, 585, -2385, 960, -2567, 398, -2033, -1021, -1115, -2962, -2931, -2985, -2261, 2628, -1554, -2754, 1785, 3298, 2026, 1747, -2489, 1045, -996, -3079, -2845, -1419, -2006, -528, -4127, -1997, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<32, float> quant3_scale = { 32, { 6.0373713495209813e-05, 4.4870754209114239e-05, 4.5838325604563579e-05, 6.2668092141393572e-05, 4.3802920117741451e-05, 5.6507724366383627e-05, 4.0326369344256818e-05, 5.8024354075314477e-05, 4.1276471165474504e-05, 5.6469660194125026e-05, 6.2084669480100274e-05, 3.7545811210293323e-05, 4.528325007413514e-05, 5.2911633247276768e-05, 4.7371257096529007e-05, 5.4226049542194232e-05, 5.9726145991589874e-05, 3.9211867260746658e-05, 6.3747967942617834e-05, 5.8158286265097558e-05, 8.5792293248232454e-05, 6.6021464590448886e-05, 5.102521026856266e-05, 7.5726231443695724e-05, 4.770117811858654e-05, 4.5741202484350652e-05, 5.6152792240027338e-05, 3.7268622691044584e-05, 5.3985429985914379e-05, 2.9357042876654305e-05, 5.3422550990944728e-05, 3.2928655855357647e-05, } };
const TfArray<32, int> quant3_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[64] = { -1877, -4184, -2886, -675, 5316, -4013, 2534, -2963, -4196, 2481, -2335, -2224, -4474, -2999, -2259, -3298, -2413, 3676, -2483, -3177, 2234, -2093, -1301, -4650, 3071, -1691, 2263, -2565, -4402, -2621, -3302, -3357, -3371, -4311, -1519, 930, -3158, 1431, -3419, -3293, -5402, -2590, -3507, 4902, -1989, -4598, 4842, -3831, 2585, 2929, -2861, 3421, 2289, -1853, -3571, 939, 2563, -2047, -947, -1882, -3374, -3016, -2675, -3922, };
const TfArray<1, int> tensor_dimension4 = { 1, { 64 } };
const TfArray<64, float> quant4_scale = { 64, { 4.1788349335547537e-05, 2.3642416635993868e-05, 2.9209919375716709e-05, 4.4375279685482383e-05, 3.2895033655222505e-05, 2.3213928216136992e-05, 3.3284504752373323e-05, 4.1118295484920964e-05, 6.0893875343026593e-05, 5.1920775149483234e-05, 4.5207863877294585e-05, 2.351701186853461e-05, 2.2019641619408503e-05, 2.5688279492896982e-05, 3.2681597076589242e-05, 2.9964528948767111e-05, 5.5692340538371354e-05, 3.6101246223552153e-05, 2.5507586542516947e-05, 4.0289167372975498e-05, 5.6404536735499278e-05, 2.4396149456151761e-05, 4.9833532102638856e-05, 1.7932041373569518e-05, 4.6751352783758193e-05, 5.3289793868316337e-05, 3.5096487408736721e-05, 3.1833620596444234e-05, 2.6949173843604513e-05, 2.0301085896790028e-05, 3.7929861719021574e-05, 2.7824546123156324e-05, 1.886815152829513e-05, 2.2530884962179698e-05, 4.0454866393702105e-05, 3.4105320082744583e-05, 4.8312176659237593e-05, 5.1355375035200268e-05, 3.3898919355124235e-05, 1.7884909539134242e-05, 1.8617814930621535e-05, 1.8873215594794601e-05, 2.1252999431453645e-05, 3.5211352951591834e-05, 3.8045764085836709e-05, 2.6250365408486687e-05, 3.6257744795875624e-05, 1.8452736185281537e-05, 3.4898959711426869e-05, 2.9488501240848564e-05, 4.2525778553681448e-05, 4.4521239033201709e-05, 2.9577904570032842e-05, 6.5146872657351196e-05, 3.4620723454281688e-05, 3.3033698855433613e-05, 3.7916735891485587e-05, 5.5043718020897359e-05, 2.670325011422392e-05, 1.8928554709418677e-05, 3.8213511288631707e-05, 4.3580039346124977e-05, 5.030636748415418e-05, 2.6957599402521737e-05, } };
const TfArray<64, int> quant4_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[64] = { -681, -859, -1256, 1054, -2543, -900, 3227, -1231, -2359, -1238, -1489, 2065, -592, -1157, 1866, -1350, -1450, 2261, 1644, 2474, -2728, -1475, -416, 159, 2678, 3630, -940, 132, 1050, -1387, -1314, -1174, 559, 2185, 780, -1493, -604, -621, -34, -512, -1482, -560, -537, 889, 2064, -1180, -1389, -130, 1927, -2045, -1130, -1319, -1897, -898, 1984, -693, -2072, -1523, -123, -1134, -514, -758, -1045, -652, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 6.3492552726529539e-05, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[2] = { -1158, 1158, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const TfArray<1, float> quant6_scale = { 1, { 9.0659843408502638e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[64*128] = { 
  26, 10, 5, -49, 6, -25, -25, -13, 6, -61, 50, -11, -29, -9, 4, 24, 9, -51, 11, -24, -65, -38, 0, 24, -29, 23, -25, -30, 0, 15, 8, -13, 3, 17, -30, -16, 78, -59, 48, -14, -33, 78, -12, -53, -11, -17, -29, -29, 8, -15, 32, -11, -5, 10, -16, -28, -11, -10, -6, 24, 17, 5, 41, 79, 5, -11, 24, -8, 3, -23, -25, 31, 27, 20, 1, 25, -39, 16, 42, 8, -9, -19, 22, 26, -15, 23, 123, 5, 6, 5, 4, 7, -3, -1, -5, 18, -24, -5, 25, 1, 1, -9, 22, 24, -16, 15, 34, -21, 39, 19, 11, -26, -26, -14, -7, -32, -5, -5, -3, -3, -4, 61, -8, 11, 29, 6, 14, -31, 
  2, 23, -5, -26, -23, 22, 14, -51, -4, 3, 62, -19, 8, 21, -33, -4, -1, -59, 6, 16, 1, -22, -11, 27, -98, 4, 21, -2, 1, 7, -20, -26, -30, 5, -6, -26, -18, -28, -30, 2, 19, 16, -3, -33, -24, -18, 12, -20, -37, -19, 9, 24, -18, 22, -7, -7, 20, -17, -18, -22, -36, 19, 40, 16, -11, -26, -13, -12, -76, 22, 12, 15, -20, -20, -8, 11, -5, -6, 1, 9, 9, 3, 9, -22, -32, -2, -6, -17, -50, -34, 1, -36, 7, -17, -13, 7, -24, 8, 19, -40, -31, -39, -29, 21, 13, -7, -2, -42, -15, -24, 29, -13, -6, -41, -21, -54, -35, -30, 13, -33, 0, 30, -4, -11, -5, -18, 28, -27, 
  -2, -11, -12, -48, -17, -18, 11, 23, 18, 3, -26, -1, 6, 15, 15, 15, 3, 8, -5, 35, -30, -42, -12, 37, -45, -13, 18, -34, -2, 28, 11, 0, -6, 28, -50, 3, 33, -63, 7, -16, 16, -22, -14, -18, 15, 24, 11, -3, -36, -15, -14, 49, -9, 20, -5, 16, -2, -16, -6, -8, -15, -32, 14, -8, 1, 15, 7, -31, -25, 17, 10, 19, -3, -11, 48, -22, -17, -16, -16, 37, -29, -22, -16, 24, 19, -7, 37, -10, 22, -11, -35, 9, -26, 33, 17, -19, 3, 5, -1, -19, -11, -22, 30, -12, -31, -24, -20, 5, -3, 19, -26, 20, -13, -24, -34, -20, -12, 0, 39, -20, 18, 101, -23, 3, 14, 19, 17, 11, 
  30, -1, 46, -19, 19, -11, -5, -37, 17, 45, -15, 16, -13, 22, 13, -69, 3, 33, -19, -42, 8, 1, -3, -15, 15, -58, -19, 20, 10, 16, -10, 8, 21, 22, -22, -1, -27, -7, 4, -20, 6, -13, 22, 19, -22, -33, 5, 12, -7, 58, 23, 45, 7, -27, -26, 17, 5, -37, -5, 8, -42, -22, -24, 2, 52, -44, -40, 0, -1, -20, 16, 0, 44, -8, -39, -33, -17, -18, -20, 9, -47, 37, -26, -4, 42, -35, 65, 15, 15, -3, -20, 9, -58, 5, -15, -9, 2, -30, -40, -25, -49, 14, -20, 13, -4, -32, 20, 31, 5, -42, 32, 1, 49, 15, -69, 46, 29, -8, -36, 9, 22, -16, 33, -8, -33, -57, -35, 18, 
  11, -15, 12, -31, 3, -22, 4, -14, -42, 13, -32, -26, 24, 11, 1, -25, -9, -21, -28, 36, -18, 4, -44, 6, -11, -47, -8, 5, -27, 6, -24, -11, 11, -15, -29, -32, 27, -1, 3, -26, -23, 20, 37, 10, 15, 1, -19, -20, -7, 12, -1, -33, -56, -12, -2, 4, -23, 21, -15, 21, -62, -41, -42, -51, 24, -21, -22, -26, -36, 0, -6, -31, 22, -9, -1, 56, -3, 35, -6, 1, 34, -70, 23, 4, -16, 0, -4, 25, -44, -18, -13, 17, 5, 24, 31, -31, -28, -21, -2, 5, -19, -7, -2, -3, -29, -36, 38, -43, 7, 16, -11, 12, 51, -29, 29, 57, -28, 19, 26, -25, -31, 20, 16, -28, 7, -50, 11, -20, 
  -6, 30, -15, -17, 27, -29, -10, 20, 38, 2, 1, 3, 2, 18, -8, 14, 15, -36, 4, 5, -6, 13, -29, 32, -14, 6, -29, 4, 41, -15, 10, -4, 7, 9, -36, 16, 54, -45, 9, 4, 5, 1, 8, -5, -23, 30, -29, -25, 8, -2, -25, 11, 1, 8, 41, 30, 10, 13, 4, -16, 54, -11, -12, -4, -18, -9, 21, -17, -21, -9, 5, -14, 60, -28, 33, 10, 15, -24, -19, 23, 26, -15, -19, 38, -36, -5, 18, 7, 28, 32, -25, -1, -7, 25, -1, 19, -10, 13, 15, -22, 16, -31, -5, -7, 6, 15, 9, 30, -14, -19, -24, -19, 21, -12, 24, -36, -8, 3, 41, -38, 11, 32, 6, -8, 11, 47, -13, -10, 
  -6, 32, 21, 30, -17, -4, -14, 1, 1, 84, -24, -9, -21, -66, -11, -11, 16, 48, 31, 31, 12, 53, 29, -4, 39, -36, -12, 67, -19, 10, -8, -6, -22, -36, -2, -2, -57, 61, 4, -16, -7, -59, 0, 43, -13, 2, 14, 10, 18, 35, -17, 34, 11, -7, -6, -10, 24, 4, 34, -14, -34, -2, 8, 7, 12, -6, -14, 17, 5, -21, 17, 39, -43, 39, -15, -4, 42, 46, 39, 2, 1, 36, 37, 10, 21, -6, 1, 9, 16, 21, -29, -7, 37, -11, 34, 47, 14, -11, 10, -10, 5, 51, -7, 23, 14, -33, -10, 27, 30, 9, 14, 9, -14, -16, -48, 73, 2, -28, -13, -14, 7, -15, -18, 4, 1, -5, 2, -11, 
  7, -12, -30, -13, 12, -31, -4, 2, -5, -3, 8, 7, 13, 15, -4, -15, -27, -32, 20, 25, -8, -7, 3, -10, 11, 6, -14, -14, -1, 16, -14, -24, -5, 24, 9, 16, 11, 8, -15, 20, -30, -28, 8, -8, -14, -22, -34, -34, 11, -25, -25, -3, 1, -18, 1, -15, -27, 0, -47, -24, -32, -20, 16, -14, 9, 8, -3, -33, -11, 19, -36, -26, -12, -3, -17, -31, -27, 6, -32, -22, 4, -17, -35, -23, 12, -20, 9, -6, -24, 18, -38, -25, -9, 7, 4, -30, 20, 14, 18, -29, -39, -30, -21, -4, -5, 10, -16, -9, -27, 21, -20, -22, 1, 22, -33, -44, 16, -3, -28, -15, -18, -6, -16, -8, -32, -8, -30, 3, 
  -30, -5, -47, -9, -19, -11, -32, 10, 2, 61, -7, -11, -6, 12, -3, 3, -11, -22, -27, 39, -6, 22, 31, 18, 1, 2, 13, -15, 23, 18, 13, -36, 22, 13, 10, -58, -42, 64, 6, -22, -35, 24, 4, 57, -8, -46, 54, -3, 14, -25, 25, 3, -13, -17, -5, -11, -37, 16, -31, -15, -40, -11, -1, -34, 11, -43, -36, -40, -27, -25, -37, 12, -85, 2, -31, 6, -10, -4, -38, -10, -6, 1, 9, -22, -1, -44, 2, 9, -11, -35, -6, -21, 5, 3, -55, 1, -19, -9, -18, 28, -14, 19, 12, -13, 18, -16, -39, -10, -17, -10, -54, 19, 11, -39, 11, -15, -32, -76, -30, 33, 15, -44, 1, -6, -65, 3, -6, -31, 
  2, -24, -39, -1, 7, -23, 1, -36, -10, -16, 7, -29, -19, -24, -5, -32, -14, -2, -31, -13, 16, 4, -8, -33, -14, 13, -28, -20, 20, -5, -14, 7, -27, -22, 5, 11, -12, -7, -30, -18, -25, 6, -29, 17, -21, 21, 12, 6, -30, -13, 12, -18, -28, 18, -16, -35, 1, 20, -33, -20, -30, -32, -5, 16, 8, 19, -29, -6, -29, -19, -33, 2, 0, -33, -20, -2, -19, 6, 9, 13, -17, 10, 2, 24, 4, 17, 14, -28, -13, -16, -11, -25, -24, -23, 8, -36, 7, 5, -23, -23, -23, -24, 20, 24, 15, 22, -24, 0, -17, -12, -18, -21, 9, 7, -20, -33, -15, 14, -25, -8, -17, 8, -34, 13, -29, 8, 13, -38, 
  8, -12, -29, -39, -45, -11, -1, -9, -35, -17, -8, -10, -19, -3, 10, 34, -26, 16, -27, -4, 10, -22, -23, 29, -55, 26, -18, 12, 20, -5, -18, 18, -20, -8, -56, -15, -2, -7, 6, 24, -18, -9, 24, -35, 15, 24, -3, 20, -38, 8, -37, 24, -34, -35, 15, -18, -23, -3, -30, 6, -3, 6, 6, -10, -18, -14, -1, -6, -22, -13, 15, -24, -21, -18, 31, 13, 7, 28, 25, 2, -10, -29, -8, 3, -41, -18, -25, 6, 7, 7, -23, -8, -5, 25, 9, 7, 23, -23, 16, 5, -19, -17, -1, 24, 5, 17, 4, -26, 6, -28, -56, -26, -25, 8, -13, 64, 29, 14, 13, 9, -29, 65, 30, -3, -4, -18, -18, 19, 
  -3, 16, -2, -19, 2, 23, 0, -6, -46, 65, -5, 1, -28, -32, 18, -34, 15, -9, -7, 20, 29, -8, -13, -9, 21, 16, 35, 59, -38, -3, -22, -31, -11, 26, -2, -4, -34, 38, -17, 17, -4, -9, 9, 21, -4, -15, 28, -26, -6, 37, -1, -35, -3, -9, -5, -18, -5, -23, 19, 23, -7, 25, -22, -7, -7, -17, 0, -34, 50, -5, 13, 6, 29, 23, -9, -20, -11, 22, -24, 3, -21, 47, 7, -38, 20, -5, -1, 3, -7, 8, 16, -32, 0, -14, 5, -21, -10, 1, -7, 37, 6, 32, -3, -13, -16, 12, -36, 50, 1, 12, 37, -13, -5, 26, -13, -2, 26, 9, -33, 26, 10, 15, 26, 17, -21, -30, -23, -32, 
  -27, 6, 31, -16, -5, -5, -36, -3, -16, -20, -8, -8, -17, 5, -24, -27, -35, -10, 22, 41, 16, -23, 23, 15, -1, -9, -10, 25, 2, -1, -40, -2, 22, -4, -13, -15, -19, 29, -30, -9, -17, -7, -12, 21, -21, -35, 5, 6, -28, 1, -40, 11, 0, -10, -5, -14, 28, 0, 0, 15, -13, 19, -16, 6, -32, 25, 18, -1, -20, 21, 23, 16, -16, -10, -17, -3, -2, -4, 21, 17, -6, -13, -33, -14, -8, -36, 7, 19, -7, -3, -10, 7, -42, 22, -27, 14, 23, 34, 8, -27, 8, -20, -19, -3, 1, 13, -11, -48, -42, -2, -41, -31, -26, -22, 40, -17, 7, -28, 20, 1, -33, -49, -22, 9, -1, 7, -15, -33, 
  1, 3, -18, -38, 3, -38, -1, 28, 16, -19, 6, -2, 25, -5, -14, 21, 33, -12, 5, 28, -37, -23, 16, -12, 5, -25, -3, 3, -29, -9, 14, 24, -18, 44, -10, 8, 26, -75, 39, 7, 22, -3, -23, -54, -16, 7, -30, -24, 10, -2, 24, 8, 20, 37, 33, -15, -33, 16, -10, -21, 22, -22, 6, 20, 6, 21, 34, -13, -18, 1, -36, 37, 54, -39, 50, 2, 2, 3, 24, 30, 27, -20, 15, 19, -10, -15, 49, -12, 26, 22, 8, 12, -35, 16, -7, 13, 2, -23, 61, 23, 36, -23, 1, 25, 17, 31, -32, -25, 0, -8, -57, 26, 2, -26, -2, -38, -26, 2, 56, 10, 18, 87, 16, 29, 22, 33, 16, -22, 
  -39, 6, 0, -29, 33, -9, -23, -28, -31, 23, -32, -6, -10, 1, -14, 4, 1, 42, -31, 15, 28, 26, 12, -10, 43, -1, 21, 3, -42, 23, 0, 12, 32, -28, -12, 12, -4, 40, -16, 23, -19, -9, -13, 36, 17, -1, 47, -17, 52, 12, -5, -25, 3, 18, -17, 12, 21, -35, 2, 12, -41, -25, -48, -20, 29, -17, 6, -47, 36, -22, -8, 4, 6, 4, -19, 17, -21, -5, -26, -8, -4, 43, -25, 25, 33, 8, -44, 16, 26, 11, -15, 14, 2, 25, 10, -18, 4, -12, -40, -6, -55, -16, 22, -10, 15, 15, 16, 60, -3, -3, 20, -13, 0, 39, -50, 6, 45, -25, -47, 34, 57, -76, 0, 13, 16, -32, 24, -30, 
  -60, 1, 14, -47, -35, -6, 5, 1, 0, 4, -1, -8, -26, 14, -38, 33, 22, -16, 29, -36, 7, 0, -22, -23, -16, -9, -19, -33, -9, 4, -7, 20, 33, 26, -34, 3, 13, -15, -25, 31, -23, 2, 10, -36, 4, 4, -9, -31, 14, -20, 28, 6, -25, 14, -30, -8, -36, -39, -26, -5, 29, -20, 13, 34, -16, 20, 0, -18, -12, 9, -36, -16, -4, -11, 27, -28, -39, -26, -4, 6, -10, 3, -10, -4, -7, -15, 12, -20, -5, -7, 22, 13, -15, 1, 5, 28, 7, -3, 2, 9, -15, 19, 26, 0, -28, 3, 10, -20, 14, -11, 22, -12, 17, 5, 28, 15, -5, 19, 10, -3, -23, 80, -8, 20, -23, 5, 5, -21, 
  12, 29, -31, -37, 9, -42, -8, 43, -12, -30, -21, 10, -27, -2, 9, 36, -12, -7, 31, 9, -38, -33, -2, 12, -65, 3, -12, -24, -3, 18, 10, 24, 18, 41, -22, 0, -1, -59, 3, -24, 8, 30, 16, -76, 4, 17, 3, -3, -12, 2, 4, 44, -35, -19, 7, 19, -44, 5, 0, -34, -15, 11, -4, 24, -81, -27, -8, 1, -3, -30, -12, -7, 78, -38, 19, -11, -3, 9, 7, 17, 31, -41, 15, 47, -5, 27, 41, -11, -19, 19, 4, 51, -29, 15, 12, 9, -3, -11, 20, 3, -14, 10, -1, -4, -27, 0, -9, 1, 9, -27, -10, -26, -9, -43, -20, -6, -7, 7, 59, -11, 6, 100, -13, 0, 14, 19, 20, 12, 
  -30, 6, -10, -24, 29, 36, 51, -30, -65, -17, 51, 21, 21, 29, 5, 20, -24, 37, 8, 23, -37, 7, 22, -30, 30, -12, 37, -42, 12, -31, 18, 12, 20, -16, 40, -9, -39, 19, -59, -4, 13, -17, -4, 27, 3, -46, 31, 16, 13, 0, 55, 44, 23, 7, -16, 13, 34, 15, 5, 12, 0, 8, 12, 5, 30, -27, -11, -32, 16, 7, -1, -13, 35, 23, -78, -4, 18, -4, -13, -23, -57, 27, -2, 10, 24, 27, -13, 21, 44, -13, 6, 1, 54, 33, 3, -39, -14, -14, -57, -18, -15, 58, 9, -31, 25, 0, -23, 46, 46, 12, 32, -16, 52, 17, -64, 21, 14, -9, -22, 9, 44, 40, 33, -27, -20, -32, -17, 5, 
  -36, -35, 11, 24, 29, -3, 26, -46, -34, 41, -16, 15, -27, 1, 0, 3, -2, 30, 8, 21, 23, 30, -2, -5, 6, -30, -7, 27, -13, 17, -10, -18, -28, 5, -14, 20, -16, 59, -46, -15, -8, -25, 35, 33, 26, -6, 31, 19, 20, 39, 9, -18, 20, 9, -17, 11, -22, -23, -21, 0, 12, -8, -31, 0, 24, 9, 10, -19, 22, -11, 19, -20, 2, 44, -16, 28, 36, -17, 11, 17, -16, -3, 16, -24, 13, 5, -17, 17, 44, -29, 4, -2, -17, -18, -13, -14, 25, -3, 2, -11, -1, 14, 26, -26, 15, -16, 7, 2, 17, 36, 10, 17, 6, 16, -19, -10, 29, -36, -13, 23, 37, -76, -1, -28, -31, -27, -20, 14, 
  23, 23, 26, -42, 54, -17, -4, 1, 10, 15, -15, 16, 25, -4, 6, 9, -18, 35, -14, 28, 10, 3, 4, 10, 47, -7, -2, -14, -19, 18, -10, -11, -1, -5, 17, 25, -64, 78, -31, -8, 19, -9, -29, 65, -29, 16, 61, 4, 30, 29, 14, 26, 24, -10, -20, -14, 11, 5, 27, 11, 5, 20, -43, -37, 14, -3, 12, -2, 23, -8, -7, 18, 21, 45, -2, 27, -1, 7, -26, -28, -42, 11, -12, 19, 29, 17, -11, -26, 45, 12, 33, 38, 40, 16, 10, -1, -29, 11, -9, 22, -22, 25, 6, 7, 6, -1, -1, 40, 28, 17, 56, -10, 15, 11, -19, 21, 12, -13, -37, 43, 13, -57, 19, 18, -20, 21, -3, 13, 
  1, -4, -8, -31, -20, -22, 11, 36, -6, -15, 19, -18, -24, 26, 12, 1, 22, 1, -25, 40, -48, -8, -5, -22, -26, 0, -48, -26, 20, -5, 27, 16, -32, -2, 19, -52, 25, -49, -20, -16, 16, -7, 5, -36, 14, -44, -29, -8, -46, -13, 28, -12, -3, -15, -15, -9, -40, -38, -29, 19, 14, -26, -33, -16, -5, 20, -37, 20, -39, -22, 12, -13, -20, -25, 34, 15, -12, -3, 20, -11, 27, -35, -32, 38, -19, -10, 6, 22, -5, -34, -10, 2, -8, 19, 34, -20, -7, -21, 3, -48, -39, 7, -16, 12, -32, 26, 23, 6, -14, -22, -36, 17, -28, -13, 39, -49, -22, 13, 29, -35, -27, 12, -25, -7, -25, -8, -20, 10, 
  -30, -36, 9, 14, 2, 9, -14, 5, -10, 10, 6, -21, -29, 17, -11, -35, -4, 0, -26, -10, -3, 0, -33, -3, 23, -4, -8, 20, 2, 13, -14, 17, 21, 5, 13, -12, -34, 18, -12, 22, -18, -19, -14, -31, -30, -43, 14, 17, -4, -33, -30, 5, -9, -22, -6, -36, -10, 15, -33, 0, -21, -11, 11, -37, -8, -23, 11, -5, -23, -33, -1, -18, 15, 19, -21, 8, -16, -4, 20, 12, 16, -2, -11, 11, -5, -2, 23, 9, -21, -8, 4, -8, 10, -28, -28, -18, -25, -17, 8, -16, 3, -6, -1, -29, 28, 2, 17, -19, -35, 15, -19, 4, 2, -38, -28, -18, 2, 4, 3, 2, -23, -35, -30, -7, 13, 12, -4, -29, 
  28, 6, -7, -24, 2, -29, 14, -8, 5, -3, -45, 7, -7, -28, -24, -18, -14, -27, -5, -13, -8, 1, -19, -21, -55, -26, -8, 18, -18, 1, -20, -22, 9, -15, 12, -33, 6, 22, 7, -4, 11, 9, -28, -12, 20, 6, -7, -4, -2, 6, -9, -26, 17, -46, 11, -21, -9, 7, -9, -17, -44, 10, 38, -18, -41, 27, 4, 18, -34, -14, -5, 0, 24, -32, 4, -6, 7, 14, 10, -17, -18, -28, -22, -21, -20, 26, 22, -3, -17, 22, -2, 12, -14, 5, -20, -10, -13, 9, 29, -21, 24, 3, 8, 8, 6, 21, 2, 16, -4, 20, -53, 6, 17, 7, 40, 8, 16, -12, -25, -19, -26, 16, -32, -3, -36, -12, -34, 10, 
  -104, -1, -3, -5, 9, -11, 17, -12, -38, 23, -10, -1, -16, -35, 5, -22, 16, 17, -13, -31, 31, -19, 3, 6, -12, 6, 19, 35, -15, -21, 20, -5, 23, -19, 24, 7, -16, -18, 9, -18, 12, -1, -18, 24, -32, 12, 22, 24, 17, 10, -24, -45, -7, -37, 25, -30, -12, -2, -14, 26, -6, -15, -27, -23, -37, -37, 11, -22, 31, -8, -6, 7, 29, -14, -26, -34, 29, -8, 22, -25, -44, 21, -28, 5, 14, -2, 25, -1, 12, 4, -13, 4, -31, -26, 23, -22, 4, 0, -36, 27, -2, -4, -28, -13, -9, 6, -5, 23, 2, 22, 8, -19, 19, -15, -16, -14, -18, -24, -25, -15, 35, -31, -27, 3, -37, 4, -9, -4, 
  1, -25, -6, 8, 10, 42, 48, 15, -15, 55, 11, 27, 8, -19, 15, -12, 15, 33, 12, 17, 28, -20, 24, 8, 13, 23, -5, 17, 18, -19, -47, -21, -12, -11, 17, 34, -15, 47, -22, -22, -2, 6, 33, 55, 44, -27, 14, 12, -9, 42, 21, 27, 29, 3, 9, 36, -21, -17, 14, -10, -22, -11, -18, 9, 31, 9, 10, 20, 49, -3, 33, -25, 54, 40, -5, 6, 0, 26, -22, -4, -13, 29, 17, -1, 15, -5, -26, -18, 25, 6, 20, 21, 15, 1, 17, 9, 26, 24, -4, 37, -36, 5, -37, 26, -16, -18, 2, 46, -7, 1, 18, -24, -16, 41, -42, 30, 27, -9, -28, 38, 16, -26, 2, -4, 21, -20, 9, -21, 
  -2, 10, 0, 8, 38, -10, 9, -18, -64, 34, -24, -22, -7, -13, 19, -59, 5, 16, 31, -1, -17, 10, 23, -30, -20, -28, -2, 10, 27, 9, 24, -28, 28, -16, -21, -39, 6, 4, -12, 23, -20, -11, -7, 8, -1, 2, 52, 7, -12, 22, -5, 33, 5, 0, -24, 35, -1, -20, 8, -15, -22, 34, -5, 11, -3, 24, 0, 28, -12, 1, 5, -21, 96, 20, 8, 30, -9, -7, 39, -20, -32, -5, 11, -16, 77, 29, 38, 4, 17, -31, 29, 8, -2, -14, -12, -29, -3, 23, 9, 25, 13, -12, 1, 4, -20, 20, 33, 15, 4, 27, 46, 3, 3, 17, -29, 53, 27, -7, -48, 4, 39, -47, -10, 17, 17, -19, 1, 20, 
  -40, -11, -36, -26, 14, -33, -26, -1, -15, -5, 15, -24, 20, -18, -3, 1, 10, 16, -27, -20, 8, -11, -24, 5, 6, -16, 0, -13, 5, 8, -14, -10, -24, 21, -10, -44, -7, -9, 23, 17, 19, 15, -22, -31, -20, -10, -26, -3, 18, -1, 16, -10, -9, -17, -24, -15, -20, -18, -13, 22, -19, 6, -14, 20, -13, -28, -20, 19, -21, -16, -18, -14, -1, 16, -14, -24, 22, -11, -18, 2, -35, -31, -19, 17, 0, -45, -17, 12, -25, -27, 5, 21, 22, 0, -19, -12, 7, 23, -4, -25, -29, -43, -23, -29, 2, 9, 5, 12, -26, -32, -13, -3, 19, -20, -23, -22, -28, 3, -19, -27, -6, -26, -30, -10, -8, 17, -9, -26, 
  3, -22, 4, -41, -15, -2, -4, -6, -12, 20, -40, -3, 11, 0, -24, 18, -21, 8, -4, 23, 13, -3, 23, 7, 5, -7, -34, 28, -10, -5, -61, -31, 28, -4, 19, 15, -3, 45, 8, 14, -3, -11, -2, 46, -7, -16, 18, -33, 17, 7, -6, 18, 26, -21, -3, -6, -1, -7, 24, -2, -6, -25, -1, -28, 27, -19, -8, -30, 18, -27, -25, -19, 37, 20, -23, -23, 17, 9, -2, 21, -42, 38, -8, -16, 53, -16, -26, 14, -12, -25, -16, -17, -62, 0, 14, -19, -1, -10, -7, -19, -15, 15, 22, 21, 7, 18, -19, 8, 13, 17, 19, 20, -7, 24, -31, 24, 4, -48, 16, 15, 0, -54, -30, 21, 6, -2, -39, 24, 
  34, -29, -21, -14, 37, 11, 12, -24, 6, 4, -13, 22, 12, 9, -8, 15, -29, 34, 16, -33, -22, 24, 12, 8, 44, -3, 33, -28, -34, 24, -1, 5, 20, -29, 25, 9, -39, -22, -33, -2, 23, -3, -29, 14, -25, -7, 39, -8, 23, 16, 59, 35, -22, -38, 3, -22, 17, -9, -28, 11, -39, -13, -35, -9, 7, 9, -15, -37, 47, -23, -3, -35, 28, 1, -13, -24, -15, -15, 0, -32, -51, -8, 4, 0, 32, -49, -22, -19, -10, -44, 16, 9, 46, 39, -12, 25, -5, -14, -6, 33, 3, 4, 22, 6, 1, 11, -17, -1, -2, 12, 61, 4, 10, 0, -79, 14, -27, -15, -6, 17, 9, -46, -6, -27, -16, -19, -9, 11, 
  24, -1, -19, 82, -20, -2, -17, 23, 53, -16, 1, -24, -1, -35, 22, -11, 19, -7, 26, 35, -28, 24, -6, 1, -1, -1, -2, -7, -1, -20, -5, 12, 5, 27, 1, 20, -61, -45, 3, -22, 4, 10, -4, -19, -10, 33, -63, 23, -29, 22, 18, -5, -21, 28, 14, -31, -26, 31, -29, -17, -2, -12, 21, -13, 0, 16, 9, -20, -42, -13, -12, 11, 9, -37, -9, -24, 28, -34, 19, -24, -37, -8, -18, 34, 20, 14, -14, 3, 9, 12, -23, -6, -15, 14, -29, 11, 6, 23, 18, 11, 21, -38, -2, -15, 3, -17, 37, -26, 31, 7, 64, 25, 22, -39, 54, -65, 13, -34, -30, -18, -39, 43, -45, 5, 22, -23, -8, -6, 
  33, 57, -32, -24, -39, -10, -6, -7, 41, -75, 57, -2, 18, 5, 3, 10, -56, -63, -23, -4, -109, 23, 13, -6, -2, -11, -24, 8, 15, 11, 26, 12, -16, 47, -45, 1, 71, -73, -23, -16, -18, 43, -8, -42, 10, -30, -36, -4, -58, -43, 12, -10, 31, 26, 18, -56, -51, 28, -34, -15, 12, -8, 13, 13, 19, 15, 19, 14, -25, 1, -31, 30, 113, -57, 45, -6, 24, -9, -12, 57, 20, -49, 7, 78, 27, 13, 97, 22, 9, 10, -23, 10, 4, 9, 19, 34, -14, 32, 40, 6, -7, -67, 13, -21, -28, -18, -16, -9, 6, -1, -36, -9, 10, -34, -42, -42, -52, 34, 29, -10, -2, 8, -19, 30, -17, 22, 15, -15, 
  -4, 39, -7, -10, -48, -7, -34, -3, 24, -51, 36, -9, 10, -44, -20, 31, 25, -25, 28, 15, -28, -5, -26, 21, 21, 10, -2, -27, -7, -16, 48, 33, 10, -15, -16, 28, 28, -78, 17, 3, 21, 10, 13, -65, 22, 0, -49, 5, -25, 22, 11, 36, -44, 43, -6, -15, -54, 46, 5, 7, 18, 0, 22, -27, -81, 19, 12, -35, 24, 6, 30, 35, 54, -38, -5, 28, 9, -22, 31, 25, 32, -28, 11, -11, 51, 42, 65, 36, -7, 28, -33, -6, -46, -15, -18, 13, -14, 15, 9, 8, 17, -6, 21, 16, 4, -3, 43, -16, 31, -17, 5, -7, -30, 1, 20, -18, -18, 25, 33, 10, -20, 29, 5, -23, 14, 18, -34, -8, 
  26, 7, -22, -29, 11, -56, 20, -45, -4, 32, -42, -40, -10, 3, 32, -2, -7, 24, -8, -43, 12, -37, 26, -2, -10, -1, -2, -8, 6, 5, -34, -35, 7, 0, 19, 37, -42, 51, -22, -18, -22, 10, -17, -2, -26, -12, 14, -18, 23, -1, 52, 25, -4, -39, -9, 2, -15, -22, -7, -18, -19, -26, -15, -28, 20, 20, 16, -24, 19, 12, 0, -21, 2, -29, -11, -2, -25, 22, -24, -16, -56, 0, -8, 3, 4, -15, -6, 13, -4, -4, 18, 27, 2, -22, -26, -33, 21, -19, -2, 20, -21, 41, -3, 13, 18, -19, 24, 38, -28, -49, 9, -31, -19, 21, -15, -20, -6, -29, -17, 7, -7, 38, 35, 13, -22, -15, -35, 3, 
  -30, -26, 19, -12, 35, 10, 13, -29, -19, 30, -44, -1, 33, -11, 16, 2, -22, 22, -29, 41, -4, -4, -17, 1, -7, -45, -4, -6, -27, -5, -34, -30, 1, -5, -11, 8, -27, 42, -52, -21, -20, 9, 27, 17, 14, -20, 12, -27, 40, 29, 10, 12, 43, -28, 0, 40, 37, -3, 4, -12, -15, 3, 15, 11, 23, -2, -3, -17, 19, -2, -27, -4, 38, 32, -9, 26, -16, 9, -22, 23, -25, 41, -11, 47, -14, 17, -39, 16, -7, -30, 11, 38, -28, -17, 9, 38, -7, -12, -3, 2, 9, 30, 1, 0, 13, 2, -10, 19, 22, -4, 33, -19, 3, 16, -19, 7, -32, -20, -28, 38, 6, -29, 15, 16, 14, 8, 14, -2, 
  28, 12, -28, -26, 17, -39, 6, -11, 66, 8, -22, 18, -23, 16, -4, -37, -16, 15, -31, 2, 29, -7, -27, -9, 11, -25, -17, 17, -19, 13, -14, -29, 5, 6, -18, 7, -6, 29, -10, 5, -7, 27, -23, 60, -17, -4, 42, 13, 17, 48, 7, 45, 0, -47, 0, -1, 8, -8, -28, 13, -46, 11, -55, 9, 23, -27, -31, -53, 27, -2, -25, 21, 98, -1, -18, 7, -23, -14, 15, -37, -29, -6, 8, -5, 32, -24, -40, 15, -5, 0, 18, 19, 29, 26, -10, -11, -28, -28, 12, 27, -50, 14, -26, -22, 22, 24, 17, 45, -14, -22, 30, -31, 31, -7, 10, 19, 8, -31, -23, 27, -12, -23, -29, -7, -44, -20, -43, 3, 
  -19, -31, 8, -24, -17, -43, -14, 2, 22, -39, 48, 5, 21, 10, -4, 21, 2, -6, -8, -3, -26, -43, 21, 29, -109, 1, -7, 0, -51, -25, -4, 27, -24, 31, 3, 28, 19, -49, 20, 14, 23, -19, -7, -24, -8, 16, 0, -25, -22, 7, 86, 1, -34, -2, 14, 20, -35, -5, -16, 10, -29, -22, -12, -21, -17, -43, -24, 11, -16, -23, 29, -33, 55, -44, 21, -11, -15, -28, -28, -24, 4, -55, 34, 5, 15, 32, 5, -1, -20, -30, 4, -26, -19, -23, 24, -39, -26, 9, 7, -12, 1, -9, 15, -11, -11, -4, 10, -11, -19, -18, 42, -35, -7, -30, -12, -18, -35, 11, -3, -6, -30, 1, 15, 15, 13, 1, -42, 10, 
  -31, 16, 0, -51, -11, 0, -5, -12, -12, -71, 16, 29, -25, 15, -17, 11, -3, -19, 10, -1, -42, -15, -1, 22, -44, -1, 21, -19, 18, 24, 7, 2, -21, 42, -43, 32, 13, -35, 28, 21, 0, 9, 19, -55, -21, 23, -47, 10, -28, 7, 6, -20, -51, 35, -13, -32, -4, 31, 9, -19, 18, 32, 4, 21, -21, -11, 27, -26, -3, -14, -29, 30, 46, -9, -4, -34, 1, 32, -7, 6, 18, -25, 29, 29, -7, -33, 56, -27, -19, 4, 22, 7, 22, 11, -6, 3, 19, -9, 29, 3, 5, -22, -9, 12, -12, 37, 20, 1, 17, 24, -62, -10, -2, 10, -33, -40, 13, 27, 60, -25, -34, 70, -17, -22, 36, 26, 26, 4, 
  -11, 22, 22, -12, 3, -13, -29, -5, 27, -13, -9, 25, -27, -2, 20, -14, -9, -12, 33, -17, -2, -24, -29, 4, 16, -15, -37, 26, 33, -2, -20, -1, -10, -10, -17, 10, 21, -10, -9, 7, 24, 4, 10, 1, -21, -21, 14, -22, -2, -10, 21, -23, -20, -27, -6, -11, -30, 1, 5, -25, -23, 0, -13, -20, 13, 12, -29, -2, -42, 20, -2, -25, -7, 12, -34, -15, -5, -6, 26, 14, -19, -24, -14, -12, -22, 4, -3, 18, 5, 17, -36, 23, 8, -12, -29, 19, 21, 31, 7, -29, -12, -20, 13, 4, 22, -5, 8, -1, 28, 13, -4, 16, -17, 0, 21, -10, 17, -15, -5, -30, -20, -3, -41, -3, -11, -36, -3, -18, 
  7, 27, -7, -30, -43, 4, -17, 21, 5, 14, 33, 14, 11, 18, -6, -20, 35, -25, -19, 47, -46, -16, -3, -5, -39, -12, 0, 15, -32, 29, -7, 43, -19, 14, -1, -37, -27, -25, 32, 26, -12, 23, 26, -34, -3, -8, 13, -27, 15, -2, 31, -17, 20, -27, -29, -20, -20, -14, 2, -9, 42, 19, 11, 31, -32, 11, -5, -15, -2, -19, -15, -2, -2, 13, 76, 20, 17, 11, 27, -1, -9, -12, 24, 9, -31, -2, 14, 18, -17, -19, -4, -17, -45, -6, -4, 1, 12, 7, -15, 13, -33, -22, -1, -16, 20, 21, -9, 22, 29, -33, -21, 32, 2, -38, 34, -25, 13, 15, 33, -21, -43, 127, -23, 31, -22, -9, -5, -8, 
  3, -9, -17, -46, -5, -6, -31, 16, -36, -64, 11, 24, 24, -19, 8, 16, 1, -29, -1, 109, -33, 7, -44, -10, -24, 5, -10, -37, -4, -10, 9, -5, -22, -17, -39, -7, 11, -19, -26, 8, 9, 15, -46, -21, -42, -21, -35, -21, 10, -11, 28, -36, 2, 27, 35, 4, -22, 32, -40, 29, 34, 47, 29, 4, 4, -5, 32, -16, -7, -6, -14, 16, 68, -20, -10, -4, 7, -4, -23, 21, 49, -38, -5, 61, -8, 6, 47, 5, -45, 8, -24, -6, -3, -24, 19, 44, 0, -33, 45, 25, -23, -5, -9, -32, -6, 4, 26, -8, 24, -16, -33, -12, 3, -21, 33, -11, -24, 27, 8, -23, -34, 40, -1, -15, 19, -14, -11, 8, 
  -27, -20, -40, -23, -39, 0, 9, -10, -10, -10, 21, 31, 27, -19, 6, -13, -2, -35, -12, -5, -5, 22, 19, 28, -25, -4, -1, -12, -4, 25, -22, -29, 7, 11, -28, -26, -32, 40, -16, -25, 4, 13, 19, -20, -17, 21, -9, 3, -28, -2, -2, -22, 8, 18, -21, -28, -11, -24, -32, 24, -29, -36, 5, -3, -53, 33, 28, 17, -29, -33, -21, 2, -22, 23, 9, -25, 14, -29, -16, -45, -1, -27, 4, -20, 5, -30, -5, 9, 15, 17, 11, -5, -8, -4, 36, 2, 18, -12, -7, -11, 1, -7, -22, -27, -2, 14, 42, -30, -40, -28, -23, -7, 8, 1, 1, -5, -10, 13, -23, -20, 0, -15, -21, 4, -13, -29, -46, 0, 
  15, 20, 16, -30, 16, 1, -10, 19, 13, 0, 31, 14, -10, 25, -4, -2, -1, -33, -10, 2, -23, 11, -21, 5, -37, 26, -2, -34, 30, -7, 38, 36, -3, 45, -29, 8, 39, -69, 10, -3, -13, 34, 23, -34, 9, 0, -4, -25, -2, -14, 3, -1, 3, 4, 13, 28, 16, -30, -15, 3, 4, -18, 31, 14, 25, -12, 15, -44, -15, -15, -18, -17, 64, 18, 46, 11, 2, 28, -2, 32, 21, -22, 22, -23, -15, -5, 61, -8, -24, 33, -16, -24, -33, -26, -4, 17, -3, 0, 18, -18, -20, 32, -13, 14, -20, 5, -25, -46, 31, 14, 18, 14, 12, 21, -4, -29, 17, 42, 45, -5, -6, 55, -1, 5, 35, 0, -6, 3, 
  22, 42, 10, -19, -17, -46, -4, 6, -14, -45, 6, 4, 19, 11, -4, 39, 40, -27, -1, 9, 5, -27, 22, -17, -31, 27, 9, -38, 18, 34, 52, 33, 16, 23, -14, 20, 45, -31, -24, 31, 20, 29, 21, -7, -13, 11, -18, 2, -8, -22, 13, -50, -11, -11, 12, -13, -3, 1, -11, 34, 22, -11, -10, 18, -39, 18, 14, -34, -16, -35, -19, 34, 37, -27, 47, -26, 9, 7, 27, 0, -13, 5, 11, 50, -14, -11, 65, 2, 14, 30, -28, 14, 44, -3, 3, 14, 26, -2, 35, 28, -20, -30, 10, -3, -12, 7, 27, -13, 30, 12, -22, 30, -13, -11, -40, -47, 3, 33, 47, -5, -11, 33, -15, 31, 42, 19, 17, -28, 
  -71, -26, 1, -18, 22, -34, 3, 23, -9, 35, -17, 19, 8, -29, -19, 17, 27, -36, -16, 11, 18, -23, 17, 0, -10, -36, 28, 31, -39, -2, -15, 14, -14, 8, 46, -20, -16, 47, 0, -1, -17, 14, 0, 42, 1, -32, 84, 14, 31, -9, 33, 18, 2, -23, -14, -9, -17, 7, 23, -5, -25, 25, 5, -20, 27, -26, -25, -13, 58, -3, -75, -41, -37, -8, -36, 16, 35, 0, -20, 0, -45, 33, 0, 15, 66, -19, -32, -7, 19, -20, -9, -28, 23, 3, 3, 34, -8, 15, -11, 2, -36, 105, 17, 12, -1, 16, -24, 62, -22, 48, -25, 8, -2, 9, 3, 33, -12, -27, -16, 29, 49, 18, 14, -19, -48, -47, 14, -5, 
  -2, -16, 12, -1, 12, -15, 29, 13, 2, 41, -59, -29, -12, -20, 18, -15, -13, 33, -23, 21, 20, 32, -3, 20, 11, -30, 33, 4, -26, -19, -50, 3, -11, 19, -4, 12, -15, 45, -10, -8, -8, 25, -32, 47, -1, -18, 48, -15, -10, 37, -27, 35, 0, -40, -6, 32, 2, -36, -6, 3, 9, -29, -51, -19, 0, -17, 4, -45, 2, -5, -16, 14, 8, 18, -7, 21, 3, -22, -12, 7, -13, 20, -20, -3, 13, -43, -9, -21, 22, -5, -5, 15, 38, -6, 8, 1, 21, -25, 11, 13, 11, 11, 15, 27, 19, 3, 10, 17, 8, -11, 28, -22, -1, 31, -30, 22, -11, -10, 5, 5, 12, -22, 8, -16, -23, -32, 25, 0, 
  -4, -15, 21, -45, 10, -11, 29, -7, 7, -35, 21, 3, -10, 14, -3, 16, 5, -7, -18, -29, -9, 3, -6, 28, -1, 4, -29, -28, 6, -22, 10, -15, -16, 16, -45, -18, 39, -22, -8, -29, 21, 23, 15, -53, -6, 12, -47, 14, 12, -16, 5, -3, -14, 24, 10, -6, -42, -4, -27, 5, 20, 20, 20, -2, -26, -28, -10, -10, -2, -31, -30, 27, 10, -9, 21, 10, -12, 6, 9, 7, 36, 6, -5, -21, 7, 24, -2, 12, -5, 11, 14, -21, 12, 0, 34, 13, -18, -1, 0, 10, -7, 16, 14, 29, 19, -21, 6, -47, -26, 9, -40, 17, 5, -31, 19, 6, -3, 17, 24, 1, 10, 65, 5, -19, 12, -3, 1, -9, 
  -2, 42, 16, 0, -52, 10, -26, 9, 26, -38, 84, 0, 10, 15, -23, 16, 9, -47, -16, -24, -87, -16, -20, -20, -54, 10, -26, 34, -43, 30, 12, 11, 10, 41, -35, -24, 61, -32, -6, 10, 2, -14, 3, -78, -5, 30, -16, 16, -23, 1, -12, -7, -15, -5, -9, 1, -54, 17, 0, -13, 14, -20, -24, -11, -32, 28, 11, -16, -49, -22, -14, 37, 26, 10, -31, -12, -9, 31, 23, 29, 13, -4, 4, -24, -29, 51, 24, -16, -42, -3, -24, 47, -28, -4, 3, 44, -5, 6, 5, -45, -3, -7, 1, -16, -14, 20, -8, -3, -2, -28, -50, -1, 15, -45, -24, 27, -29, 6, 12, 1, -17, 70, -11, 23, -10, 12, 57, 34, 
  5, 2, 6, -45, 12, 22, -17, -27, -28, -10, -60, -27, 8, -9, -6, -32, 25, -4, 23, 10, -1, 13, -21, 10, -27, -34, 18, 29, -17, -19, -26, 10, 6, -6, -24, -9, 19, 23, 11, -3, -8, -8, 18, -41, 15, -4, -6, -21, 4, -1, -12, 23, 17, 8, 18, -30, -4, -4, -24, -23, 3, 4, -8, -20, -11, 7, 15, 13, -4, 11, 4, 0, -27, -3, -32, -29, -9, 27, 11, -10, -11, -22, -12, -42, -15, -37, -5, 12, -14, 10, 16, -10, -28, 11, 7, -4, -21, 19, -35, -11, -5, 11, -14, 2, 0, 14, -27, -28, -43, 23, -8, 26, 22, -24, -75, -15, 15, 7, -33, -29, 22, -48, 4, 7, -14, 3, 11, 22, 
  -30, 11, -22, -32, 13, -7, -10, -26, 22, 17, -20, 7, 26, -12, -4, -48, -1, 40, 11, -29, 20, 39, 19, 31, -21, -51, -13, 21, -21, 4, 1, -41, -30, 10, -15, 14, -47, -12, -3, -6, 18, 23, 33, 11, -16, -17, 58, -3, -2, 51, -1, 49, 14, 9, -32, 8, 2, -50, 34, 29, -44, 18, -39, 15, -4, -42, 13, 1, 44, -24, -29, -10, -19, 42, -44, 24, 27, -18, -33, -31, -15, 50, 23, -13, 22, -10, -33, -9, -13, -31, -23, -5, 1, 19, 37, 25, 3, 24, -32, -24, -26, 30, 19, -20, -15, -6, -3, 6, 8, -5, -1, 16, 40, 0, -28, 18, 30, -6, -45, 9, -6, -61, 20, 5, 13, -18, 0, -15, 
  -36, -14, -25, 14, -13, -18, -27, 5, -44, -32, 18, -32, -12, 24, 3, -26, -28, -13, -17, 20, -19, 2, -10, -20, -18, 7, -36, 9, -7, 11, -23, -31, 8, -15, -12, -4, -24, 1, -24, -20, 10, 20, -33, -22, -22, -6, -13, -21, -25, 4, -33, -4, 14, -16, -13, -4, -40, -22, -34, -17, 4, 7, -7, -4, 34, 26, 16, 41, -16, 33, -42, 5, 18, 20, -20, -16, -29, 16, -14, 6, -3, 12, -26, 9, -20, 19, 26, 6, -1, 20, -39, 28, -7, -29, -41, -39, -3, 20, -12, -18, -15, -19, 9, -1, -6, -3, -34, -25, -27, 15, -9, -13, -2, 14, 7, -39, 8, -22, -11, 13, -30, -5, -20, -10, -9, -28, 11, -2, 
  5, 3, 26, -44, 8, 14, 5, 27, 24, -31, 40, -20, 15, 2, 24, 28, 6, 0, 28, 4, -43, 0, 18, -15, 15, 1, -17, -11, 9, -1, 17, 33, -2, 5, -15, 34, 60, -66, -18, -26, -3, 21, -6, -34, -15, 10, -13, -16, -16, -3, 32, -37, -12, 17, 15, -27, -12, 16, 28, 8, 1, 39, 41, 18, -45, 6, 3, -35, -27, -44, 11, -7, -14, -17, 39, 2, 7, 7, 3, 7, 6, -10, -5, -8, -17, 10, 43, -13, -6, 40, -1, 10, 1, 4, -6, 13, 17, -18, 24, -22, 6, -19, -5, 4, -28, 13, 14, -25, 21, 18, -4, 4, -35, 18, 12, -23, -31, 10, -3, -9, -21, 46, 17, -1, 21, 17, 11, -8, 
  -3, 3, 47, 3, 22, 2, 1, -23, -3, -51, 22, -34, -35, -9, 16, 11, 17, -26, 10, 23, -57, 6, 7, -18, 36, 20, -28, -23, -2, -29, 43, 31, 13, -4, -56, -26, 59, -40, 23, -11, 8, 1, 8, -18, -39, 28, -20, -6, -54, 8, 50, 39, -37, 21, 4, -19, -48, -6, 25, 24, 52, 19, 16, -7, -51, -8, -6, -8, -36, -74, -17, -40, -10, -9, -15, -7, 2, 19, -27, -1, 12, -57, -13, 32, -8, 50, -28, 10, -16, 47, -5, 56, -67, -28, 25, 48, -12, -2, 21, -36, -7, -64, -36, 4, 15, 11, -10, -7, 14, -26, 26, 0, -34, -26, 40, 4, -16, 45, 87, -55, -19, 83, 25, -11, -4, 22, 48, -28, 
  68, 10, 7, -96, 13, -26, -15, -28, -3, -11, 80, -22, -22, -16, -11, 23, 35, -13, -19, 23, -30, -44, -31, -8, -22, -19, -29, -20, 8, -22, 39, -15, 13, -18, -80, -8, 61, -45, 21, 9, 16, -27, -10, 17, -12, -26, -16, 4, -3, 11, 15, -28, -26, 18, 15, -10, -28, 40, -9, -24, 30, 1, 42, -13, 17, 42, 39, -41, -37, -21, -42, -10, 64, 5, 40, 26, -3, 8, 27, 27, 34, -40, 4, -4, -25, -20, 77, -2, -28, -9, 8, 36, -1, 24, 24, 13, -36, 11, 10, -30, 6, -24, 40, -13, -40, -18, 44, -25, -2, -17, -33, -17, 10, 15, 27, -25, -57, 54, 41, -40, 17, 60, 26, 16, 28, -1, 14, -22, 
  -14, 27, 21, -62, -27, -26, -28, 34, 51, -70, 17, 29, 8, 2, 33, 44, 32, -39, -1, 5, -47, -19, 6, 17, -47, -20, -10, 2, -13, -19, 59, 34, -23, -15, 8, 19, 26, -53, -17, -10, -4, -3, 15, -42, -14, 30, -17, -3, -23, -29, -15, 4, 16, 35, 17, 5, 21, 6, 10, -25, 56, 8, 20, 31, -26, 8, 23, -38, 9, -4, -29, 18, 68, -23, 22, -1, -3, -30, 40, -2, -12, -41, -18, 4, -21, -20, 31, -1, -22, 8, -5, -39, -39, -1, -17, -19, 11, -4, 7, 5, -2, 19, -18, -1, -7, 32, 7, -42, -8, 8, -25, -1, -4, 20, 29, -35, 9, 19, 29, -12, 11, 82, -5, 28, 18, -5, 12, -11, 
  9, -32, -3, 9, 14, -9, 23, -29, -83, 55, -49, 18, -33, -7, -44, -15, 14, -15, 14, 36, 28, 15, -11, 4, 6, 0, 70, 18, -16, -14, -19, 31, 4, 4, 11, 18, -15, 51, -23, -18, 3, -20, -15, 40, -14, -17, 63, -10, 19, 55, -1, 19, 3, -14, -28, -3, -8, -41, -3, 10, -12, -17, -23, 25, 23, 4, -43, -26, 18, -19, 47, 41, -21, 26, 14, -12, 30, -18, -38, -23, 0, 56, 20, -8, 4, -6, 11, 3, -9, -23, 19, -32, -6, 1, 7, 29, 0, -8, -13, 70, -19, 76, 1, -9, 4, 0, 12, 24, 21, 27, 36, -13, 6, 44, -55, 29, -1, 12, -30, 13, -1, -52, 27, 6, -2, -39, 19, 10, 
  -10, 4, 12, 1, -12, -34, -20, -10, -13, -30, -7, -4, 5, 9, -16, -12, -10, 35, 4, 20, -16, -28, -3, -11, -2, 0, -6, -11, -4, 15, -38, -13, -29, 15, -23, 4, 14, 0, -34, 14, -27, -8, 3, 10, -4, 6, 49, 0, -1, -13, -4, -28, 24, -18, -7, -25, 11, -29, 6, -13, 5, 5, -42, -34, 1, -18, -2, 13, -29, 21, -32, -36, -26, 14, -10, -7, -27, 22, 6, 12, -42, -17, -1, 6, 34, -16, 7, -9, 10, -19, -3, -31, -10, -24, -28, -18, 16, 23, -43, -16, 7, 31, 18, -21, 14, 25, -9, 32, -12, -28, 28, 9, -7, -11, -18, -37, 12, -2, 1, 2, -20, -69, -39, -33, -6, -1, -4, 5, 
  27, -16, 8, -6, -43, -28, -28, -26, -4, -29, 18, -39, -19, 23, 21, 23, -10, 14, -5, 19, -25, 21, 3, 33, -75, 3, -2, 17, 29, -10, -20, -31, 2, 0, -21, -11, 29, -28, -7, -7, 15, 0, -1, -45, -28, -24, -8, -14, -21, -27, 14, -22, -20, -18, -46, -31, -68, -5, -26, 27, -41, -21, -30, -14, 4, -20, -21, 29, -36, -14, -2, -25, -14, -50, -18, -18, -32, 5, -14, 1, -42, -21, -6, -7, -19, 13, -14, -8, -51, -17, -62, -8, -14, 5, -16, -21, -10, 3, -41, -14, 9, -15, -25, 2, -2, 11, 6, -24, 22, -9, 0, -30, 17, -30, -36, 4, -43, -35, -8, -11, -28, 19, -40, 13, -6, -27, -5, -15, 
  -16, 7, -6, -18, -18, 29, 4, 11, -18, -2, -6, -3, -26, -12, 9, 1, 28, -41, -4, -31, -12, -11, 24, 20, -52, 0, 3, 33, -23, -10, 22, -33, -4, -3, 7, 21, 12, -55, -3, -16, 29, -30, -19, -12, -32, -5, -39, -31, 3, -38, 52, 8, -4, -27, 8, 13, -18, 10, -8, 27, 38, -15, 1, -13, -48, 11, -13, 5, -35, -17, -10, 26, 12, 9, -36, -33, 25, 10, -3, 2, -28, 10, -15, 24, 17, 25, -12, 18, -25, -27, -7, -15, -16, -8, 4, -9, -15, -24, -24, -69, -27, -16, 23, -36, -10, -29, 1, -4, -42, -34, -39, -2, -19, -44, -2, -19, -13, 17, 6, 7, -18, 29, -17, -1, -26, -6, -21, -30, 
  -37, 13, 13, -68, -3, 17, 3, -49, -13, 35, -6, -17, 10, 6, -12, -11, 2, 7, 7, 31, -2, -19, 15, 4, -1, -2, -30, 25, -22, -29, -73, -23, 23, -26, 13, 46, 6, 16, -10, -9, -22, 18, -15, 22, -19, -38, 34, 10, -7, 26, -30, -10, 1, -34, -14, -4, 35, -35, -25, -13, -22, 11, -51, -16, -14, 39, 7, -25, -5, 21, -32, 30, 33, -16, 21, 5, -29, 21, 12, 6, -8, -8, 20, 8, -14, 15, 16, 13, 20, 23, -34, 23, 12, 5, -7, -24, 25, -12, 13, 7, -24, 69, -31, -10, 2, -4, 2, 17, -2, -37, 83, -11, 16, 25, 24, 26, 26, -34, 1, 23, -14, -12, -37, 24, 6, -29, -11, -14, 
  -35, -1, 18, -1, -18, -7, -9, 2, -24, -20, -9, 22, 16, 26, -3, 20, -29, -35, 0, 19, -22, -12, 7, -17, -24, 6, -9, -18, 38, 14, 7, 19, 5, -17, -23, 0, 8, -50, -21, -15, 0, -6, 21, -40, -14, 30, 8, 15, 20, -21, 29, -23, -15, -8, 3, 3, -30, 25, 26, 12, 34, 33, 23, -25, -27, 16, -20, 22, -32, -6, -26, -12, -13, -29, 52, 19, -2, -4, 34, -12, 31, -28, -11, 48, 1, 24, 1, 22, -14, 16, -17, 27, -36, 27, -23, -21, 6, 12, -10, 9, 34, 4, 13, -21, -20, 6, -17, -5, 28, -25, -2, 10, 8, -10, 1, -22, -18, 31, 38, -14, 8, 51, -20, -16, 6, 30, 35, 17, 
  -32, 2, -2, -45, -8, -22, -20, -1, -6, -10, -37, 6, -13, -7, -6, -34, -29, -25, -3, -3, 5, 25, 25, 25, -3, -10, 17, 1, 16, 6, -48, -4, 1, -15, 2, 12, -29, -48, 17, -29, -16, 24, 23, 5, 20, -8, -40, 12, -27, -36, -29, 10, -9, -24, -6, 6, -8, -29, -24, 28, -45, 19, 20, 17, 7, -15, 17, -28, -28, 9, -2, -6, 27, -15, 0, -24, 1, -3, -20, 24, 11, -14, 10, 22, -14, 18, -26, -30, -5, 8, -24, -13, -5, -31, -33, -20, 8, 28, 22, -18, -32, -6, -1, 19, 1, -26, -24, -2, -35, -21, -25, 25, 0, -30, -14, -7, -26, -3, -13, 10, -17, 11, -22, -24, -28, 16, -9, 16, 
  32, 2, -21, -57, -24, -16, -29, -3, -48, -37, -16, -12, 30, 6, -20, 40, -38, -22, 11, -1, -15, 2, 27, -2, -44, -5, -23, -23, -21, -8, -3, 40, 34, 6, -20, -20, 18, -5, 13, -15, 17, -27, -21, 0, 3, 23, -20, -25, 0, -4, -4, -28, -26, 6, -2, 14, -28, 21, -19, 13, 23, 30, -20, 15, 5, 21, 25, -7, -16, 11, 11, 33, 70, -30, -20, 22, -26, -12, 19, 38, 38, -22, 20, 40, -6, -11, -4, -4, -21, 46, -23, 7, 27, 3, 37, 21, 6, -31, 53, 8, 15, -38, -7, 12, -2, -27, -3, 19, -13, -20, -47, -18, -26, -8, 14, -18, -21, 13, 59, 4, -35, 52, 2, -23, -3, 30, -6, -18, 
  -6, -28, 8, -3, 14, 11, 0, -23, -3, -14, -30, 10, -20, 9, -18, 11, -6, 1, 7, -7, -15, 20, 23, 29, -14, -20, -33, 28, 18, 19, 14, -4, -16, 3, -25, 14, -23, -1, -35, -17, 21, 19, 17, 6, -34, 10, -36, -13, -10, 7, -1, 11, -35, 8, -4, -6, -33, -22, -1, 1, -17, 0, -11, -10, -42, 26, 14, -4, -36, -22, -6, -8, 12, 7, 14, -11, -33, -4, 12, 8, -14, 2, 13, 15, 3, 11, 6, 1, -11, -33, -41, 10, -16, 22, 3, -17, 13, -20, 24, -23, -32, -24, 6, 6, -3, -20, -25, 18, -26, -21, 10, -7, 16, -4, 13, -18, 16, 8, -21, 16, -8, 14, -19, 9, -31, -22, 14, 8, 
  12, -21, -33, -5, -3, 5, -28, -34, -20, 3, -23, -2, 18, 16, -30, 9, 20, -44, -5, 4, 19, 23, -18, -30, 62, 0, -20, -19, 35, 7, -45, -37, -4, -21, 13, 8, 18, -11, 14, 25, -1, 7, -21, -5, -29, -33, 100, 15, -3, 52, -25, 2, -22, -13, -37, 6, -1, -37, -1, 22, -23, -7, -3, 23, 0, 6, 4, -73, 1, -30, -33, -17, -12, -30, -13, 17, -29, 6, -36, 7, -13, 24, 5, -22, -20, 11, 13, -15, 42, 18, -16, 12, 18, 9, -11, -45, -10, 20, -16, -42, -22, 39, -28, -19, 27, 19, 9, 15, 13, -15, -27, -5, 3, 20, -27, 49, -14, -14, 17, -21, 34, -32, 7, 28, -13, -16, -61, -12, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 64,128 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0058731897734105587, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[2*64] = { 
  -62, 53, 35, -75, 75, 76, -41, -11, 82, -78, -58, -8, 60, 111, -88, 27, -52, 17, -53, 31, -61, -28, -5, 30, -80, -3, 74, -70, -54, 6, 123, -8, 40, -30, -81, 28, 67, -21, 69, 51, 13, 82, 72, -32, 50, 79, 7, 38, -127, -41, 52, -21, 77, 80, -84, -68, -78, 5, -46, 76, -68, 16, 31, -54, 
  -87, -45, -6, 56, 57, -30, 24, 0, 30, -69, -69, 76, 69, -52, 20, 14, -91, 92, -19, 110, -52, 27, -28, 36, 8, 77, 35, 28, 18, -47, 59, -87, 62, 76, -25, 11, -53, 5, 5, -26, -71, -66, -32, 13, 86, 47, -78, 39, -19, 34, -67, -88, -26, -61, -20, 31, -97, -4, 63, -76, 11, -59, 35, 37, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 2,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0031483841594308615, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*65] = { 
  /* [0][0][][] */ -86,22,43,23,22,27,41,-1,-5,-76,-56,-16,-7,-60,-56,-51,-71,-2,-127,-79,-15,-61,-11,-81,-46,-41,-32,-61,-44,-9,-43,-22,-62,-27,7,50,3,-39,-83,-36,-5,-6,-62,-1,20,-12,-101,32,0,-32,-48,1,8,-45,-9,-57,-36,-16,49,0,-77,16,-1,-59,-56, -102,-33,-58,2,-3,45,1,-60,15,2,-42,-58,-78,-81,-94,-124,-67,-47,-85,-101,-38,-39,-47,-1,-111,-48,-2,-24,-29,34,13,42,-5,44,15,83,-11,-31,-18,-85,-55,-41,-30,-14,-25,-30,-45,-103,-32,-42,56,-11,-28,-35,-57,-36,-25,7,4,-12,-80,-17,35,-42,-6, 5,49,22,-18,-54,-49,-8,-21,0,53,-23,15,-7,73,52,95,-27,14,3,93,56,70,29,115,28,23,27,53,-60,-53,-1,-25,-18,-15,-11,-37,-11,18,12,-23,19,-49,36,13,-14,21,36,-45,5,65,2,91,19,20,53,60,7,55,31,48,10,-6,38,-4,29, 
  /* [1][0][][] */ -12,-55,46,14,-18,28,-7,-62,-9,-40,-52,-11,30,-37,-43,-50,-13,-127,-65,-12,-59,-49,-68,64,-28,-9,-1,-17,24,-89,51,62,47,-5,0,2,1,-45,-120,100,-35,18,64,10,-23,-23,71,-38,31,-24,-116,-86,22,22,2,-48,87,-33,17,35,-54,18,8,-39,-46, -54,-46,45,34,-10,-85,18,1,22,-61,-7,100,-58,16,-34,-82,-25,-17,-13,-81,-29,-89,54,21,-104,-82,-81,88,13,-46,-59,-69,-20,1,65,9,7,75,-10,-22,-22,18,67,-6,-14,-54,-79,2,-47,37,-61,-75,17,-79,-37,43,44,-1,-105,72,-14,29,1,18,27, 48,25,-127,-20,-101,23,-46,-18,-1,-33,44,35,-55,-68,-89,-23,-98,-120,-41,-66,52,-121,-70,-58,31,91,-17,61,70,-19,23,10,-30,-13,25,-19,47,-45,18,-22,57,-38,-21,-48,53,44,21,-92,-74,36,-110,7,-42,-111,-45,66,-3,-4,100,11,-103,83,-18,-70,-16, 
  /* [2][0][][] */ -26,-9,-85,-40,-41,-15,16,14,40,37,30,-24,-24,33,-2,11,50,5,-40,30,-28,-45,-38,-48,-47,-2,36,12,-5,19,-50,-38,-21,-23,-75,-24,4,30,62,-79,-26,39,10,19,-24,11,-2,9,-46,6,33,40,-41,26,-24,-59,-18,11,-23,-22,70,41,-3,91,-15, -29,-47,29,55,66,108,16,48,-17,11,5,-19,-3,-22,-59,0,14,31,20,-20,8,-71,-39,-43,-23,-44,-4,-7,-2,-39,-50,-37,28,12,-5,-27,-61,-62,-36,-25,32,-73,-24,-8,37,-41,-51,-14,0,-24,-85,-9,-78,-89,-16,-37,-51,-48,28,54,-80,-29,-41,-43,-14, -18,-51,-72,37,-52,3,7,31,-59,-5,5,-32,-2,-70,3,4,40,-4,3,-51,11,-2,-48,-16,-32,-61,2,-52,-41,-64,-54,-92,5,-15,-21,-26,-29,-7,-34,4,-49,-65,-7,-31,-82,-58,26,-32,-70,-127,19,-9,-19,-33,-23,-7,-22,-35,-21,-19,-32,-36,-48,-35,-29, 
  /* [3][0][][] */ -53,-12,101,62,60,92,56,109,34,-37,22,27,30,-49,-71,-17,-20,-2,-26,-34,-46,-34,-1,-17,-39,-60,-18,-18,25,14,29,50,-4,6,64,63,-27,10,-39,18,-12,74,54,44,25,17,32,31,36,1,-13,-86,-55,-73,-49,-43,8,35,-24,34,32,-34,20,-49,-36, -26,-5,73,127,97,113,107,43,-23,-19,-46,-4,-42,0,-3,-52,-63,39,63,-84,-109,-25,-63,-103,20,2,8,7,23,53,-16,44,-11,-14,86,67,19,75,41,-20,34,-45,-54,43,-34,48,-38,51,-2,-63,-78,-6,-54,-54,-28,-43,72,-16,-9,53,-3,-20,-56,22,-21, -2,24,86,20,125,100,63,56,10,19,-17,47,35,-5,-16,-41,-42,79,-30,-30,-15,-55,6,-15,-54,-7,43,28,26,3,-29,50,-40,83,-30,73,-8,-3,21,-73,48,-10,-10,10,15,11,-30,-31,34,-21,-74,-28,-12,-30,-73,44,-50,-63,17,-12,2,-60,-41,-28,-32, 
  /* [4][0][][] */ 14,-26,16,-38,-109,-56,-39,-34,7,-11,24,44,44,53,127,57,97,-48,40,31,29,58,80,19,45,20,-41,-64,17,-51,-33,-42,7,-61,-28,27,-22,47,18,49,2,41,35,-33,6,33,67,-4,-25,21,61,109,92,30,56,-36,-22,-2,10,34,29,15,27,13,12, 27,46,-17,-16,-62,-26,-48,-51,33,20,-21,27,3,81,104,103,25,-11,45,56,42,22,108,40,25,21,28,-27,-63,33,11,59,20,-35,-21,-36,12,63,47,22,39,4,14,-21,19,-26,57,-4,50,4,69,91,49,34,48,-18,-3,25,-37,-25,-10,-10,41,28,-1, -18,-32,-41,-54,-102,-55,-6,-47,-35,-27,9,25,-23,14,15,46,51,21,41,71,22,80,18,56,3,41,-39,-25,-2,-37,-2,-38,-44,-43,-52,-34,-26,2,57,-12,-55,40,-12,24,-28,13,-25,24,42,-26,19,69,10,-22,47,33,18,-11,29,57,21,51,-16,32,90, 
  /* [5][0][][] */ 40,29,28,18,76,33,87,18,11,-20,12,24,-3,47,-63,55,-63,-5,5,-60,-73,-97,-31,-30,-68,-29,-38,-26,55,72,2,-8,26,63,4,63,35,63,-36,-1,29,-12,38,49,71,12,35,24,32,60,15,-9,38,55,38,-5,-41,88,-11,-15,-15,-59,-69,-48,47, -38,-41,101,103,-4,90,127,49,-41,44,-24,-34,-25,28,-93,0,-58,-9,18,-85,-20,-54,-47,-4,-71,-51,-65,-50,87,-6,32,-42,-27,-15,-33,-31,-22,-73,46,15,88,-3,14,42,-14,-64,-69,-84,-38,-31,-109,-112,18,15,3,44,86,-38,71,-38,-14,72,81,-22,-80, 26,53,11,91,38,30,-8,2,104,17,43,4,4,28,-9,-1,-78,-33,-57,26,-91,-61,-15,-93,-81,12,-63,-25,-2,19,-25,-39,3,-29,66,9,-6,82,9,99,29,72,67,26,66,8,47,-41,5,35,26,-4,33,-83,38,5,77,76,37,1,-44,54,-27,-35,-60, 
  /* [6][0][][] */ -61,-55,-49,-38,-37,-11,-42,22,-18,-56,2,9,-52,-124,-16,-95,-10,-89,-5,-72,-84,-121,-35,-35,-64,-19,23,-25,-23,-66,-15,62,-13,-18,-24,-36,-39,-37,-12,-29,-27,-3,-7,32,6,1,-39,-40,-34,46,29,0,-42,-1,-16,-49,11,49,7,56,-4,-18,-47,-80,-44, -52,5,35,8,-44,-2,18,-22,3,3,-15,-4,-66,-20,-7,-48,-83,-50,12,-21,-84,5,5,10,-40,-36,72,-48,-2,-32,-9,26,-14,-21,5,-15,-35,88,46,-40,2,28,-73,-28,25,45,50,-20,6,-59,-62,5,-52,-7,-22,28,-15,48,-40,2,21,-9,-30,-60,47, -67,-47,43,22,54,-6,-21,-2,10,-36,-50,-7,-64,-40,-91,-101,-127,-21,-56,-86,-43,-85,-64,-104,-75,-85,-51,29,-46,19,8,-47,-87,-22,-61,12,-18,-56,37,2,-17,-56,36,-15,23,4,-52,-17,-49,24,38,-25,-3,-13,8,51,5,7,82,-65,-52,-20,52,20,9, 
  /* [7][0][][] */ -64,-5,-18,-8,-77,-74,32,-43,-69,-40,-49,-37,-1,36,42,-18,6,2,-39,-1,33,-45,-54,-44,-10,-89,-90,52,37,-14,-26,2,-11,33,-35,25,-74,-67,-92,20,-64,-23,39,65,9,-18,-106,-31,4,-44,-59,-65,53,18,-119,-86,-104,47,-46,20,10,-58,-70,38,-52, -17,25,-34,-43,-32,-13,-60,-31,-43,-32,-47,-97,-26,-87,2,-82,-22,38,-74,-78,-17,-49,-39,35,-75,-50,-38,-13,-20,49,34,-16,-39,-38,-1,25,-15,26,29,31,-90,-52,18,-40,37,-127,-27,-23,-76,10,-56,-34,-85,74,-36,-22,14,29,-10,-76,-57,-85,-41,-18,-94, -24,28,12,-21,-7,-6,-49,3,55,15,36,45,53,61,44,42,22,54,21,-23,-7,-72,-8,60,47,-29,-60,28,9,-57,-29,-27,47,-39,47,-51,-10,47,-20,29,34,29,30,50,-20,-8,54,-2,-28,34,-15,10,-18,-6,29,25,18,55,-42,-7,2,5,-54,-38,7, 
  /* [8][0][][] */ 33,35,-72,-31,-102,-15,15,-76,5,-5,29,64,88,39,19,46,27,20,-43,-5,57,33,87,3,17,-2,-22,41,-53,-37,-40,-34,-58,-28,-11,26,-1,-33,3,14,-5,23,2,18,-34,13,52,24,-33,73,38,15,57,-22,45,4,-25,3,15,-1,-5,38,52,77,23, 2,-20,-31,-57,-31,-127,-83,-67,-38,-5,-5,34,-9,18,34,63,18,13,-27,59,32,5,85,9,-30,8,15,-49,-25,3,-23,9,-27,-1,-27,-60,-14,-4,-3,-19,16,-28,-16,-8,-21,21,47,33,-46,34,-14,11,3,-6,41,-28,-39,2,25,-66,20,8,13,-52,-37, -30,27,-16,-84,-84,-72,-10,-50,54,1,-28,78,-4,59,102,79,101,-14,3,-11,30,56,107,51,-3,43,38,16,-66,-72,9,-2,34,11,-68,-42,19,25,25,3,33,-69,-12,-18,-34,23,27,-20,-26,34,58,67,27,0,54,-6,-54,11,10,-10,6,10,62,-33,19, 
  /* [9][0][][] */ -23,19,11,-42,7,-36,-18,0,-16,-34,8,-63,-63,52,-8,-61,-69,-85,-99,-80,-80,-71,-5,7,-37,-73,-52,-33,7,-44,37,-8,-3,-1,11,77,-24,-9,-15,74,2,16,-16,-49,10,-9,38,28,-1,-27,-20,-16,45,-78,-99,48,-23,-33,-20,-37,-17,9,24,31,-30, -1,-60,87,-8,-10,16,52,6,-12,-37,-16,34,-30,51,-10,86,-21,-84,-127,69,49,-123,-68,39,-39,-34,35,78,-7,-23,1,66,21,6,46,19,-7,-1,-45,57,-16,26,-3,-25,-32,68,-24,18,28,1,-12,32,-6,-9,30,-30,-15,0,-60,40,12,7,-28,-5,-83, -40,-11,-60,29,38,18,28,-53,38,-94,-59,25,11,-37,-118,-16,-80,-52,-12,-46,-55,-56,-65,-91,-56,18,-69,-51,-17,73,-56,30,-35,-11,-62,-44,-50,-93,-17,-13,-7,74,-28,7,25,-24,8,-18,-30,-28,-50,52,-62,-26,-66,-67,66,32,-5,-37,-49,28,-21,-9,-20, 
  /* [10][0][][] */ -48,72,-4,116,64,123,73,13,16,66,4,15,-36,-82,-61,-15,-71,51,-21,-42,-69,-21,20,-112,-51,-31,-4,-5,16,59,12,30,34,81,45,62,12,-26,64,7,-41,1,-18,22,-45,10,34,-12,16,-21,-77,-39,-17,24,-44,34,55,70,-4,-52,-20,32,55,-2,-5, -52,-34,75,94,59,70,73,86,-27,54,-35,-52,-58,5,-59,-69,-81,-11,-45,18,-100,-42,-13,-25,-25,-44,28,15,87,52,-15,27,-12,63,24,73,28,-29,-11,18,-24,-20,22,-14,47,20,23,-29,-43,23,-9,13,59,11,-7,63,-9,34,8,-11,-48,-16,33,-33,-68, -32,-37,30,33,35,127,40,48,28,44,-34,21,53,3,-32,-65,-53,-4,48,-84,7,-24,-3,-80,0,35,32,17,-28,-5,18,-6,40,73,16,18,9,56,-12,16,-6,-50,42,-51,-27,32,-38,25,50,24,-29,-5,-56,2,-4,-49,40,59,38,-36,-28,-30,-36,-45,-38, 
  /* [11][0][][] */ 26,-1,-47,-57,-33,-37,-64,-44,-124,-50,27,7,-95,-94,-55,-37,44,-40,6,-24,10,65,93,64,45,23,-17,83,48,3,-38,31,71,6,-56,-44,35,-21,-62,-38,-51,-64,-12,36,-7,21,-41,-61,34,6,-111,-57,-50,54,-22,-32,42,6,-18,-8,-67,-22,-29,30,-11, 20,38,-31,-48,38,-15,25,-44,-39,-108,66,44,-70,48,-20,32,112,-50,-2,-127,-36,97,93,65,-124,24,0,37,-34,38,-58,-59,40,-119,27,-72,30,10,-8,-56,-23,-22,17,-20,-11,-32,-8,-56,-26,-70,-77,-111,52,-14,-25,8,-42,53,30,22,-78,26,-49,-2,20, -49,-78,-42,18,-9,-39,-20,-13,-92,-29,-18,-28,-10,-31,-46,1,74,-14,-46,-43,35,118,64,-32,-8,56,93,-51,-14,-28,-86,8,4,3,-24,-25,-49,18,82,-33,-27,-80,0,-24,-15,-24,-29,14,11,-42,-45,-39,34,-37,33,-37,10,-23,12,11,-52,17,55,-4,22, 
  /* [12][0][][] */ 18,40,23,73,88,127,69,-4,-1,9,-22,-91,8,-73,-119,-80,-36,-66,62,-16,-20,-74,-48,-96,-25,-38,-23,17,-34,68,-3,72,65,53,42,71,45,22,-35,-15,14,40,-7,-34,29,-19,18,-25,21,2,-58,-87,-52,33,-23,20,71,80,66,55,40,66,25,52,11, -55,-51,62,79,78,110,40,71,13,-30,-47,13,-50,-74,-3,-47,44,30,48,-15,-8,-93,-82,-65,-65,23,71,47,99,-22,18,39,5,62,67,42,14,55,45,-91,-10,2,23,6,-24,0,15,-30,-36,50,-76,-51,34,-16,-25,-60,-30,73,88,63,59,36,-46,-63,-36, -26,1,-60,-16,34,31,22,42,12,-12,-6,-60,-53,-41,-73,5,-95,-56,8,21,-49,-19,-78,17,48,-18,-48,69,-4,45,-3,49,-20,-73,41,-53,21,38,-23,-47,28,-3,23,26,15,15,-35,39,11,-47,-30,-34,-77,-35,23,64,-11,-67,75,-14,9,22,23,34,-65, 
  /* [13][0][][] */ -12,-45,-12,-33,-42,5,-76,-58,-47,-70,16,-16,-64,-68,-67,23,78,-36,-40,-43,-15,94,24,43,18,10,70,-1,-56,-51,-117,13,-4,-13,-9,-19,8,8,-13,-51,-32,-69,-14,40,-59,-36,28,15,-3,-23,-51,7,44,-39,-8,-4,-42,-81,-37,33,-25,8,-25,-11,-7, -7,14,18,-32,34,-24,11,-37,-34,-97,-49,6,7,10,5,-15,60,11,-58,-5,-104,65,10,12,-25,-1,-28,-4,21,115,-13,41,28,-27,-32,1,-8,66,-36,-63,-21,25,15,72,-31,-35,-34,-10,18,-120,-31,-41,-22,-5,-47,-3,-10,-38,-92,-2,-20,58,11,18,-5, -42,41,-41,26,35,-28,0,-3,16,16,15,-38,-19,-45,-57,1,-33,-31,-77,-17,-61,-53,6,-127,0,-16,-38,26,36,28,-6,-40,-34,-60,-30,65,-94,17,79,0,-32,-3,-4,15,-6,49,15,-42,-8,-13,-64,14,8,-36,-56,47,-35,-9,-21,-11,-20,-8,-13,-34,-51, 
  /* [14][0][][] */ -78,-78,20,57,109,89,8,50,-12,-43,-29,5,-70,-68,-84,-95,9,43,-53,7,-78,-26,-45,-127,-46,5,-12,75,39,69,61,18,-12,-15,22,9,-27,59,81,19,55,35,18,36,56,43,3,10,-33,43,-20,-30,-42,-2,-22,-12,78,69,30,34,58,-45,11,-13,-107, 26,-5,-15,74,10,32,72,48,63,4,-70,-14,-23,-24,-88,-83,-51,25,6,11,-87,-65,-123,-33,-65,39,-37,2,60,-5,70,-70,43,16,-20,65,69,4,40,-66,-4,60,9,31,22,-26,74,-25,32,43,1,-31,-40,35,42,-50,32,61,-2,42,-28,-27,52,-35,41, -11,49,31,109,44,84,62,86,20,94,29,-14,-45,-14,18,19,28,21,-22,49,-37,-19,-39,13,-63,-28,39,70,-29,-4,-24,-63,-20,-38,-27,-22,-71,30,-15,-63,-50,-5,0,20,53,21,-32,-67,-67,24,-16,-11,-44,-41,42,9,41,-12,-65,-85,-69,-12,33,-2,38, 
  /* [15][0][][] */ -36,17,-68,11,36,-26,28,-1,23,-36,-7,46,20,-80,28,-8,-39,-51,-39,10,-25,5,-37,26,-16,-5,-38,-48,4,-67,-17,-69,20,-40,21,-23,26,-69,8,-62,-57,-53,-42,29,-50,-38,2,35,-38,-49,35,-23,-13,13,19,-49,-25,-5,-77,16,-24,2,10,-45,-4, 20,56,79,22,66,58,85,27,-26,-25,20,-51,-1,21,-115,-46,28,50,-44,-9,-76,-32,-127,-70,-36,27,46,46,8,73,31,27,76,54,94,52,8,17,15,-26,-36,-9,33,-29,68,72,-53,-53,-45,-2,-21,-88,-71,-55,47,-71,54,-31,24,25,-59,-17,-64,-15,-13, 22,24,21,17,75,77,8,86,-31,-46,-73,-72,-22,-5,-96,-71,38,-31,7,-24,-8,0,-102,-93,7,16,21,10,77,8,-5,55,17,-4,87,32,57,64,29,-9,8,66,62,49,-1,-46,-38,-36,-8,-63,-45,-6,-39,8,71,63,6,-31,47,-32,65,56,-18,-36,-91, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,65 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0031053978018462658, 0.0029313960112631321, 0.0032762656919658184, 0.0026092974003404379, 0.0027663479559123516, 0.0023442024830728769, 0.004121171310544014, 0.0030131435487419367, 0.0026562775019556284, 0.003962669987231493, 0.0026252460666000843, 0.0036533838137984276, 0.0025565642863512039, 0.0040182517841458321, 0.0025946605019271374, 0.0026427325792610645, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[32*1*3*16] = { 
  /* [0][0][][] */ -57,-79,-28,56,93,-5,-111,11,35,-59,54,3,48,-60,-2,-56, -35,56,-67,-64,-51,-61,1,-40,-73,-63,-33,-14,3,-10,-39,8, -107,14,5,-34,-127,0,17,-41,-82,62,-19,-21,11,40,-24,-37, 
  /* [1][0][][] */ -55,-96,-29,44,-78,-82,-110,-21,21,-41,29,-70,42,-61,-3,85, -53,31,-26,-87,-38,28,-75,44,61,-33,-127,-70,-80,-30,-29,-99, -101,-34,27,41,-32,-12,-28,24,48,-112,-19,24,-24,21,-90,-58, 
  /* [2][0][][] */ -89,-101,-3,-68,76,-40,-56,-127,-25,-106,31,19,25,67,31,-40, 18,-9,1,-86,13,7,-11,-73,-29,90,17,17,-28,0,-17,-64, -10,79,-52,-14,-98,-28,102,-43,-45,51,-78,-43,16,18,31,22, 
  /* [3][0][][] */ 17,-4,-24,-32,34,71,32,42,46,-18,0,8,13,-36,-27,-29, 29,43,-29,19,-120,57,50,10,-109,-9,-12,-31,-51,41,9,67, 21,4,0,20,-127,3,-30,14,-12,64,39,-24,-37,6,48,13, 
  /* [4][0][][] */ 17,39,10,-63,-63,-8,11,16,77,69,-72,-65,-43,-66,-55,-43, -74,-61,24,-115,-55,-31,-119,-63,-19,4,-127,-68,-1,-48,-96,-53, -31,39,95,-89,-71,-118,3,-11,-9,23,-1,23,-121,-8,-67,-73, 
  /* [5][0][][] */ 39,15,34,-20,-26,-40,79,-2,1,126,11,-21,-90,96,-73,-8, -6,-41,2,-78,-7,-43,-77,66,9,-5,-70,-127,-25,-40,5,18, -58,24,8,23,-32,17,25,-122,-21,-18,-55,48,-31,9,-14,-14, 
  /* [6][0][][] */ 34,17,-14,-62,-13,13,-21,-34,-70,-22,19,-32,-7,-33,-102,-3, 51,-76,-37,55,-95,-25,-25,-8,-33,1,30,-49,4,-95,-127,-46, 5,-81,17,-8,-115,80,-4,-7,-68,-64,22,35,-45,39,17,-80, 
  /* [7][0][][] */ -51,22,-25,50,-14,-48,-6,40,-77,-28,25,-15,8,-41,57,11, -42,30,16,21,-2,-39,-22,-2,-3,-12,2,-75,-39,-49,-56,-21, -3,18,-10,-14,-40,26,-84,-41,-43,-73,27,-67,-8,-127,-11,-12, 
  /* [8][0][][] */ -71,111,-43,-64,-25,-74,83,62,-19,127,-68,112,-68,13,-12,11, 91,-22,55,-74,-12,-47,-31,62,22,-1,-108,41,-42,-9,-83,-100, 2,-113,-48,-48,49,26,-121,-33,51,-20,-11,37,41,69,-64,36, 
  /* [9][0][][] */ 4,4,51,-40,19,101,-16,65,-39,4,14,13,-36,52,36,35, -42,-54,-15,-3,-57,-14,33,-15,-13,-41,-11,8,-116,-52,52,37, 35,-97,-36,-26,-95,86,-54,-127,-50,11,99,2,5,15,-38,-33, 
  /* [10][0][][] */ -46,10,-49,-58,64,3,-76,26,24,-127,-30,114,-41,40,-74,-49, -25,-44,-22,-64,-71,-20,-53,-48,-30,-87,9,45,-9,62,-89,-49, -24,41,-11,-80,-20,-18,-56,-25,55,19,4,101,-65,61,-16,-65, 
  /* [11][0][][] */ -17,-34,-37,27,-41,37,-70,3,18,-101,14,54,-30,-56,-5,-9, -74,71,-35,-12,7,-60,-33,8,-127,-54,-14,-9,-106,-9,-71,-113, -85,25,59,39,19,-74,-35,-93,-5,20,-51,-101,-55,62,-43,74, 
  /* [12][0][][] */ 88,-84,52,29,-16,78,54,36,9,-15,-28,-27,-86,41,-11,-29, 13,-53,35,-85,100,-105,-63,-95,-12,-26,-26,94,-19,-5,-62,-64, -35,-4,-33,-106,87,-12,-127,-77,-5,-70,-77,79,-76,78,-86,-17, 
  /* [13][0][][] */ -39,-81,-88,-46,-46,28,61,-82,-46,-41,-18,26,29,26,19,1, -53,-31,-50,-85,62,-36,-46,-40,-38,-26,-86,16,-21,-72,-8,-32, -101,-13,8,-86,-30,-70,33,-79,-66,-53,-36,-93,-127,-10,-45,-26, 
  /* [14][0][][] */ 1,21,-77,-76,-30,-64,39,-22,-78,36,-24,-19,-94,1,1,-3, -57,5,-42,-31,28,-66,-66,38,39,-10,-61,-18,-4,47,-22,-127, -19,49,43,4,-22,36,-47,-62,36,-34,1,-70,-7,34,-41,-71, 
  /* [15][0][][] */ 3,38,-24,-24,-54,-66,47,35,25,76,-7,8,-3,54,-30,30, -31,-110,-26,40,-32,34,-108,25,-78,-50,47,-75,58,-22,28,5, -28,-37,-22,50,32,-17,36,-127,-74,-38,19,49,48,-25,-22,-31, 
  /* [16][0][][] */ -69,69,-30,-83,-127,-16,-9,-76,-126,75,-7,-45,-49,31,-62,-6, 63,-25,22,-60,37,8,65,60,21,80,-45,56,-13,0,-67,-69, -69,8,31,79,44,73,-72,-2,-12,-65,42,-21,-50,-16,-22,9, 
  /* [17][0][][] */ 23,19,-20,-13,-57,-19,127,-14,73,84,-73,80,-118,115,-41,-7, 59,-42,-2,-67,6,-54,-28,89,6,12,-41,-98,29,-10,-94,-7, 17,42,-38,-16,74,-4,-29,-27,93,-55,-50,53,27,-27,-100,-45, 
  /* [18][0][][] */ 2,-70,35,-47,-39,61,-127,-15,-97,-103,16,-7,32,-17,44,-8, -33,-52,-30,18,-22,45,-96,6,9,-113,59,-30,15,-54,95,-30, 17,-37,-41,36,-52,-26,-30,17,19,-35,7,-30,-35,37,-1,16, 
  /* [19][0][][] */ -9,-59,27,104,-11,56,-75,-14,-50,-75,61,-54,-23,-8,20,65, 28,-28,-17,52,-15,21,-127,-1,-23,-20,69,-112,54,-72,25,-4, -14,-127,42,70,-49,47,-115,-54,-18,-9,69,-52,14,-99,-26,85, 
  /* [20][0][][] */ -13,-66,-22,47,-9,-23,-127,2,-36,-40,44,23,30,-78,20,-8, -22,-31,23,18,-34,23,-74,-10,-14,-42,9,-32,21,-23,2,37, 29,-41,-22,-1,5,-17,-75,8,20,-79,12,-29,10,-44,-16,32, 
  /* [21][0][][] */ -75,-39,33,55,-54,-15,-53,-45,-38,-107,1,-44,36,-67,-64,60, -46,-108,-27,20,35,35,-80,-30,-58,-51,61,-78,69,-127,85,-6, 18,52,11,11,-43,-45,-107,43,34,51,-37,56,22,43,35,51, 
  /* [22][0][][] */ 17,67,20,-9,-23,-77,127,-77,38,20,-83,-25,-50,-31,-7,-61, -12,12,-7,-95,0,-25,-50,-69,-5,-55,24,51,29,-36,19,-13, 10,-2,16,-5,39,-48,-72,18,-47,-42,-2,-3,-110,-41,-84,-47, 
  /* [23][0][][] */ -3,46,46,18,-20,60,30,-14,1,-6,7,0,35,-34,60,19, -7,37,5,1,-84,62,32,-5,-8,39,-38,37,-19,46,0,-16, -38,-42,-43,-36,-127,-10,4,-37,-45,-8,-58,-17,-45,-33,-58,-18, 
  /* [24][0][][] */ -84,-60,-9,18,-72,59,-43,24,-101,-44,-32,9,-67,-127,-42,52, -44,-76,52,46,26,64,-7,-6,-8,28,-25,-27,34,-85,-6,-74, -11,-9,-52,-63,-57,-85,-18,52,-47,4,-86,75,12,-35,-82,-106, 
  /* [25][0][][] */ -57,-29,59,-107,65,-90,-15,-7,10,-23,-83,57,-17,78,-53,-55, 45,-54,69,-10,-35,-2,25,-1,-2,-10,45,8,-53,-37,-10,19, -93,-30,42,-87,25,-127,20,-103,56,-61,-74,113,24,82,13,22, 
  /* [26][0][][] */ 43,-24,-17,-41,8,-46,-18,16,11,-78,-39,11,15,21,-29,10, -76,-33,-33,-70,48,-127,-89,40,-92,60,-49,-12,-89,75,-15,-35, 3,-51,-58,-46,-78,-29,21,-20,-79,-124,-13,-50,-47,22,-20,-9, 
  /* [27][0][][] */ -9,118,-85,-55,24,-45,100,107,-5,121,-90,17,-15,66,4,-38, -58,-20,25,-86,-113,-1,68,-7,-120,72,-2,-51,7,2,6,-18, 127,63,96,-42,-39,-47,92,49,-4,29,-18,-16,89,91,70,78, 
  /* [28][0][][] */ -2,-22,31,-69,34,-16,-78,11,35,-122,36,-36,77,-34,32,-33, -48,-76,5,-28,-89,-24,-1,31,-89,-7,-24,56,-33,21,-16,-45, 68,-6,-31,-53,-63,0,127,-18,6,61,34,-54,9,7,71,-28, 
  /* [29][0][][] */ 22,53,-68,-115,-44,-27,-58,-82,-100,20,37,-84,-28,-54,-85,15, 48,-127,79,69,-101,-73,-71,-1,16,-60,56,-25,-32,-74,-8,-96, -17,-25,29,60,-62,126,-77,-11,-121,-34,-83,26,-24,-53,35,94, 
  /* [30][0][][] */ 0,29,64,-75,31,1,54,-47,52,5,28,25,-22,-13,-57,-32, 85,-63,-33,28,49,32,-127,0,4,24,-41,18,28,4,-55,11, -22,-24,10,-70,31,-18,-102,-36,-42,6,-15,56,-5,26,-18,-54, 
  /* [31][0][][] */ 7,42,-124,-48,-5,-124,16,-8,-104,-85,-1,12,0,-127,-65,-50, 28,-85,29,71,-71,-94,27,22,-34,-5,-15,25,44,-71,-19,-87, -28,-23,54,66,-106,-34,-4,64,36,0,14,28,-39,-81,-110,6, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant10_scale = { 32, { 0.0036715702153742313, 0.0027287725824862719, 0.0027876144740730524, 0.0038111009635031223, 0.0026638330891728401, 0.0034364638850092888, 0.0024524100590497255, 0.0035286962520331144, 0.0025101895444095135, 0.003434149082750082, 0.0037756206002086401, 0.0022833130788058043, 0.0027538579888641834, 0.0032177709508687258, 0.0028808382339775562, 0.003297705901786685, 0.0036321890074759722, 0.0023846325930207968, 0.0038767724763602018, 0.0035368411336094141, 0.005217377096414566, 0.004015033133327961, 0.0031030499376356602, 0.0046052192337810993, 0.0029009019490331411, 0.002781708026304841, 0.0034148788545280695, 0.0022664561402052641, 0.0032830729614943266, 0.0017853208119049668, 0.003248841967433691, 0.0020025251433253288, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[64*1*3*32] = { 
  /* [0][0][][] */ 3,-9,30,-3,-19,74,-71,23,56,-69,-34,-19,-17,-53,-58,-44,88,46,-11,15,-26,23,-57,-64,-12,24,-27,-39,-16,-17,-38,13, 19,-23,-85,53,-47,61,-35,-36,-10,-22,-36,-53,-29,53,56,24,39,14,97,-22,-31,-80,127,41,43,-49,-38,-47,87,23,-93,5, -52,12,-47,36,12,15,-18,-42,-4,48,-64,-8,40,122,-69,-35,-102,-32,39,29,107,26,46,69,-2,-14,-18,-53,-41,33,-37,35, 
  /* [1][0][][] */ -1,-10,-106,-22,-5,-73,49,-11,113,-77,55,43,27,9,75,-20,81,44,-56,-60,-48,-79,-40,-127,-58,85,2,42,27,37,32,-27, 31,83,12,-94,-62,-99,48,18,34,-4,50,44,82,106,-51,-121,-1,-19,-89,55,-37,-44,-17,-39,39,33,7,-17,-86,27,-20,-19, 111,120,74,49,63,-2,-99,-45,17,-7,55,37,-6,124,-23,-115,-103,-19,30,-101,-18,2,65,61,5,46,37,63,52,57,71,69, 
  /* [2][0][][] */ -97,16,-24,-60,-24,-15,-32,-62,18,-60,127,36,47,-6,-97,63,-41,54,13,36,-99,-15,65,-61,3,44,-23,-41,-58,-43,-8,-16, -26,98,26,-79,-55,51,-57,-4,-76,4,72,-76,26,28,49,27,-82,-33,-30,16,44,0,-65,-19,-51,-29,92,-106,0,-33,-43,20, 3,8,18,120,9,55,57,-72,-23,24,60,-25,-52,-25,38,-44,29,1,-12,-28,43,-101,4,2,-98,-15,-72,-124,20,62,-36,37, 
  /* [3][0][][] */ -127,-11,-1,60,8,43,26,15,5,9,-8,42,-41,66,5,21,10,29,-56,-48,-49,6,-14,20,6,14,-81,36,10,-19,-78,-10, -92,-3,-31,41,-19,37,-41,-13,28,-7,-56,-2,-92,82,10,-14,-16,-1,-16,-33,-5,-13,-15,-3,15,2,14,65,24,-19,-66,-19, -19,-19,9,31,14,89,23,-47,23,71,44,1,-36,51,-58,-99,35,13,-31,-42,-39,-58,29,27,48,-2,-8,51,11,-20,-11,12, 
  /* [4][0][][] */ -114,-12,-39,-35,87,9,-17,44,72,20,-1,91,-25,-101,-4,42,6,10,-26,45,43,21,-19,-70,-21,-59,121,-62,2,61,-53,44, -73,-40,40,53,-8,63,-44,-28,8,35,-31,-36,-44,-70,21,3,-99,-43,127,-17,-28,21,-20,-84,-38,-4,-58,-33,-41,0,4,6, -96,11,-31,-45,-35,-97,46,80,6,21,-14,-11,-81,51,24,13,71,1,51,52,46,68,-20,6,-25,28,19,-8,25,51,7,-2, 
  /* [5][0][][] */ -85,45,-83,44,18,-80,-9,-20,56,-80,-35,-31,-8,122,-15,4,-65,-107,24,-10,-81,-71,32,36,36,-30,45,-58,27,-51,-57,-67, -103,2,-75,-15,-82,-39,-62,-78,47,50,0,58,-127,24,35,-52,-72,-37,21,-51,-83,12,61,45,-31,-79,36,-73,37,62,35,14, -6,-58,54,-10,-15,55,55,19,9,23,-18,20,49,64,2,-96,30,-46,11,-50,-76,-35,-61,87,-79,-10,-77,25,-20,-96,-95,-67, 
  /* [6][0][][] */ -127,-20,-87,70,12,39,-40,5,72,91,-12,-30,-32,-65,-16,-27,-14,-40,34,-2,5,-8,15,101,31,26,-41,27,-15,-63,-9,-26, -34,60,-20,-93,-49,-34,24,52,-61,44,-23,53,-35,-45,5,-6,-27,28,57,-16,2,-14,-8,-51,22,45,-28,39,31,-9,-58,18, -63,13,41,79,45,38,-9,41,26,74,-16,37,-75,-33,52,-4,85,-30,-63,23,20,39,41,49,7,-49,1,-9,67,22,10,-23, 
  /* [7][0][][] */ 127,15,-19,24,5,-67,-20,34,0,-14,11,-7,-2,3,-22,-69,13,-18,20,-83,-36,-34,20,-30,-4,14,3,24,-5,-21,0,32, 53,-31,-28,35,-36,-102,35,12,31,-11,16,-3,22,-35,32,-32,8,18,0,-40,-61,-55,-22,-7,1,35,7,13,9,32,-10,38, 17,11,34,-22,39,-65,-37,7,-26,-67,69,10,63,18,-2,46,54,49,30,0,26,-21,-3,-42,21,-30,-6,-12,21,-43,20,6, 
  /* [8][0][][] */ 127,-3,81,-38,12,-87,12,27,-72,-54,14,-10,3,-7,-23,-68,-5,-60,4,-41,-19,-41,-9,-70,30,-73,71,-34,-5,-14,17,-31, 7,20,-13,8,-33,-46,-6,-20,-19,-34,-46,-14,-55,27,-16,-20,37,-28,-51,-68,19,-22,8,-33,9,-68,-13,21,49,4,-51,1, 0,25,6,-26,-11,112,3,-13,-11,30,19,11,27,44,-22,37,-17,41,-2,34,53,-18,-25,26,-34,-16,55,-9,-22,-17,-5,4, 
  /* [9][0][][] */ 2,-5,-78,-33,-19,11,26,29,-7,-35,17,2,-54,35,15,-18,-31,-46,4,30,25,-34,10,5,-11,6,-44,-43,-26,-29,-19,6, -19,-10,-26,-62,15,-67,-10,10,-11,-57,-58,12,-28,10,8,-5,-31,-36,36,23,34,57,11,-70,7,-23,-37,-81,-41,53,-21,-14, -14,-29,-61,6,36,127,-28,-38,3,-4,39,-9,-9,13,1,14,41,54,-17,-12,-33,24,-8,-41,4,-15,-3,23,29,9,13,18, 
  /* [10][0][][] */ -57,-39,-25,-115,-31,-106,18,17,72,-86,-8,-43,41,-29,41,43,7,7,33,-41,-64,-21,46,11,-40,5,-42,-5,-30,53,-18,47, -4,40,-17,-95,-30,-92,-22,-42,-29,-5,38,30,62,50,4,-17,-14,-62,-49,11,-2,-14,-31,-54,-8,34,58,-22,19,-12,7,-12, 56,46,12,94,20,48,-19,16,-26,75,127,-24,-43,97,-33,-124,-81,-29,61,-60,-18,-16,-32,56,41,-35,4,2,45,11,-20,-46, 
  /* [11][0][][] */ -6,-23,-29,30,-42,11,-83,6,94,-71,122,10,89,-26,31,-112,1,41,45,-17,-49,-80,-27,-9,58,48,56,-37,-25,49,-54,49, 98,-34,45,-65,28,48,-45,-43,-16,23,70,5,-10,-25,-74,-64,-55,51,110,-21,33,-9,30,-127,-70,-38,-118,-29,58,11,-23,22, -33,-35,-49,-28,73,-29,-9,-30,4,-14,65,-71,-1,-32,40,31,-26,-40,4,-48,-65,-3,38,42,42,-7,-118,-36,-100,-12,-7,-41, 
  /* [12][0][][] */ 50,56,-41,50,56,-80,44,1,14,-99,-39,-84,8,-49,-48,-97,-16,-89,-76,-41,10,34,-12,-49,38,-63,1,-37,30,-3,-73,17, 66,6,13,-84,-19,22,-96,-45,-93,-18,34,-22,-11,-76,-106,-64,17,-47,20,-85,1,-100,-59,48,-57,-48,-60,-127,-20,-19,-39,39, -92,-4,40,-14,-26,34,23,25,-57,-23,17,-80,33,24,25,-2,29,-62,3,40,-103,14,-34,48,55,-15,59,-66,-66,-51,2,-69, 
  /* [13][0][][] */ 18,-26,50,-26,-74,33,-46,2,28,-25,-74,9,15,6,-59,-52,127,68,-56,-52,35,-17,23,-14,48,-97,71,19,-54,-88,33,-25, 59,-12,75,-76,8,-17,-51,22,-81,-43,4,20,34,37,-43,-87,34,25,-23,-7,-59,-43,43,-46,-44,16,11,-57,-85,-86,-31,24, 67,-1,61,99,15,-74,-61,46,5,28,-69,-77,-32,-1,-84,30,-73,-63,-34,2,-29,-6,34,-46,-37,-37,49,-22,-19,37,-14,-47, 
  /* [14][0][][] */ 127,36,58,-39,29,28,2,-12,-75,-10,16,-2,-69,93,-13,-40,1,-30,15,37,-19,-60,-36,-30,96,-82,23,-35,21,32,22,39, 28,-31,-9,-28,54,-42,40,16,-68,-6,12,27,-50,42,22,-54,-38,6,-26,-38,22,-21,-10,-2,55,0,-18,-30,-41,50,22,19, -9,-16,-31,4,28,41,38,-27,2,18,48,50,0,-4,5,64,68,-40,-13,44,9,-28,-39,-60,-45,1,15,-24,-2,19,-51,64, 
  /* [15][0][][] */ 0,-57,-59,-30,-60,-16,-20,-49,-25,53,14,11,-14,27,43,-18,28,-104,-40,-127,-72,-81,17,-64,-39,-55,-15,15,-58,-30,-63,44, 65,-24,37,-91,-7,30,22,16,77,-100,11,12,67,-55,25,6,77,18,-70,-73,-100,-53,-3,-60,-42,88,-37,14,17,18,5,-17, 55,-25,69,18,75,-35,44,-10,28,-37,73,-29,52,29,17,29,2,100,-26,-34,-20,-81,18,-13,-25,31,-26,-11,50,-5,-33,0, 
  /* [16][0][][] */ 127,-10,48,-48,9,-70,22,15,-24,-58,20,-3,57,5,-12,14,-12,20,7,-3,24,18,13,-47,36,-7,-19,0,16,21,25,31, 48,-15,7,25,-10,13,-5,15,-22,6,37,15,-32,-22,-7,-80,-11,-41,-18,-18,2,-5,-33,1,14,-21,25,10,19,-29,-14,9, -11,20,-35,29,25,-34,-10,-39,7,3,-7,-5,-25,-61,-11,-9,33,20,22,-21,-1,-53,23,11,15,-53,15,-35,-34,-2,-63,11, 
  /* [17][0][][] */ -36,-16,-10,-37,55,-58,33,-9,-37,-35,-9,11,-2,-37,-15,-60,-2,-30,-46,15,49,2,-26,-38,-27,-25,-29,-127,-31,-4,-9,-15, -125,32,-9,-71,-6,82,17,45,-63,-2,-54,21,-69,-18,-57,42,6,-2,10,73,63,15,-55,-35,-19,-31,-25,-65,-69,36,-55,7, -64,1,-78,-49,-52,0,5,-13,-37,-86,-18,5,-46,-17,-26,33,-55,19,46,54,27,58,39,-77,50,6,42,-49,45,-18,-4,3, 
  /* [18][0][][] */ -33,-5,-96,7,-7,-57,-21,43,31,37,-22,22,-35,-83,-83,-1,-73,-33,53,-127,-46,-22,-81,-46,-80,-10,-79,-3,2,-84,5,12, -52,32,-51,0,-35,-26,-37,-83,-79,-86,-46,-46,-38,57,-86,-53,-66,-78,-30,-28,-51,33,-20,26,43,-5,22,-78,-78,43,30,-47, 9,37,6,-24,54,-6,-53,3,-75,10,51,-50,-69,-70,20,4,-64,-18,-59,25,-80,-98,38,17,28,18,-71,-73,-77,-29,25,-14, 
  /* [19][0][][] */ 92,13,-65,-6,13,-39,-24,4,-38,-23,-56,-34,-52,2,-9,-42,-18,35,31,-13,-35,-47,-40,62,-13,-49,40,-60,-25,43,-27,-8, 67,-22,-96,-20,-21,96,-17,18,22,8,-12,22,-86,-4,15,-66,-8,-10,38,-45,-5,-34,-19,3,17,-109,47,-39,-81,31,-36,6, -8,-41,-75,22,-17,16,22,127,37,-50,-25,3,-13,-38,27,61,100,64,27,-31,42,60,50,30,28,-102,-74,-73,-28,66,12,-37, 
  /* [20][0][][] */ 1,-13,-41,-88,22,-30,-10,-34,-52,-24,-38,46,-8,-4,13,-7,-4,-25,-34,1,-7,13,6,-28,17,-65,2,-67,-86,-11,10,-14, -24,-14,-18,-127,-29,-18,-31,-24,7,-2,-44,4,-74,5,6,14,-76,-64,14,7,42,24,-29,9,0,-41,-39,-60,-82,-36,7,-6, -77,-17,-32,-40,-1,18,9,20,43,-40,-32,11,10,45,34,13,-2,49,28,12,15,25,23,-55,40,-21,-57,-14,-7,-33,22,12, 
  /* [21][0][][] */ -112,37,28,-49,22,3,66,24,-68,43,-58,2,-69,42,-3,-77,0,33,30,-111,-2,-90,-67,-1,-54,-4,-125,26,2,39,-83,66, 22,-11,104,12,28,-16,31,-4,45,-32,-10,44,-24,17,29,-127,-78,53,13,38,-12,-91,20,73,3,-14,-6,-49,77,-85,11,18, 24,-8,-58,-104,-52,-26,-88,-72,-65,-100,-41,-56,-22,-61,35,-66,-111,-20,-39,-31,79,-109,48,-33,50,36,-80,-39,-45,23,-76,-64, 
  /* [22][0][][] */ 127,4,93,56,0,-37,-4,-22,-35,52,-12,12,6,-27,0,-50,-3,-21,-23,41,-29,-34,15,-34,-7,4,-43,-51,-13,-21,-9,1, -42,-25,-78,-27,9,-47,26,-1,-20,-12,-22,-4,-25,-43,17,5,-31,-8,-9,9,17,24,-25,-12,-34,2,0,-15,-70,-15,-25,-3, -13,-22,-7,-2,-12,7,38,3,16,10,28,12,-56,-33,-11,41,-35,-40,4,-15,-39,-32,-31,-21,5,23,-27,9,-30,-4,1,-25, 
  /* [23][0][][] */ -34,68,-58,-53,32,-55,21,-69,-32,-22,-108,-11,2,-105,-114,-47,-105,-79,-117,-45,-76,-9,-81,10,-32,-90,-1,-104,-7,-28,14,51, 86,-115,19,-60,30,-23,19,3,-102,-31,46,-111,-91,-16,-75,68,-7,65,54,-97,-72,-127,2,15,32,-126,-6,-86,-68,-8,-41,-56, 27,-6,-79,-108,-61,-68,32,-89,-122,-68,12,24,4,55,-50,-5,-25,72,49,70,2,-93,-64,-119,-18,-84,65,-47,-30,39,57,44, 
  /* [24][0][][] */ -15,-26,-59,-71,12,-23,-3,4,-30,-37,19,-11,-2,17,22,46,-37,15,60,26,41,67,24,-72,26,-35,20,-65,-48,59,-54,-45, -55,41,-17,12,3,-9,21,-4,15,43,5,-10,16,-6,-53,-20,11,-2,30,2,48,50,-22,-30,61,-45,-48,8,-35,-18,-32,27, -71,-12,-45,-43,-6,15,7,42,38,16,-9,-35,-54,127,25,-2,14,21,-32,5,36,4,-20,-13,34,-27,-102,-42,-6,6,3,-36, 
  /* [25][0][][] */ -3,-8,10,-127,-26,-83,32,1,21,-67,15,-19,43,-1,21,31,-11,6,33,0,-34,-8,16,-17,-33,7,0,-56,-47,23,19,14, -43,27,-4,0,-27,-17,-28,-34,-7,7,19,-34,33,67,-15,5,-11,-3,-37,2,-3,7,-24,-11,-45,25,0,-45,-9,19,7,-23, 59,27,38,39,-48,29,18,3,-21,51,2,-33,-1,-2,-34,-54,-36,-54,-21,-56,-5,-51,-6,41,-39,-28,72,8,60,12,5,23, 
  /* [26][0][][] */ -50,6,-3,34,41,15,7,-27,-1,-4,63,27,19,-41,-19,4,-75,3,-26,53,54,7,-3,119,44,-4,-1,41,39,20,-17,-23, -32,25,1,-9,-39,-13,-2,5,100,-16,-27,19,-59,-29,-36,18,-56,-30,19,-30,36,35,9,-54,7,-27,-10,-20,46,-40,-58,-56, 18,-58,10,32,-16,-32,-10,-83,-83,45,17,-38,1,-26,-127,-43,14,-24,-45,10,-66,-20,-33,32,6,-13,-20,-29,28,-23,-89,-25, 
  /* [27][0][][] */ -22,-38,1,-67,7,11,12,-47,-6,6,40,2,-62,0,43,32,-78,-13,53,35,127,53,22,24,55,27,41,-14,-18,-6,-72,42, -59,-43,1,-17,17,-18,-17,-22,-66,-4,30,-11,65,48,-60,-42,19,42,6,-101,9,-62,36,-14,42,-110,-29,-77,-35,19,-55,15, 2,-31,19,-44,2,15,0,-71,23,-73,-15,50,-40,-21,-34,3,0,-61,11,-73,-54,-45,-70,-55,20,49,36,-10,-39,-9,16,-40, 
  /* [28][0][][] */ -53,49,-96,-47,20,6,-65,27,97,-32,-29,15,-108,-34,11,46,127,6,-4,-64,6,57,-98,-59,75,-65,-7,-63,-61,18,-115,-61, 23,10,37,56,16,103,-25,-79,-59,39,9,-21,-79,46,7,56,-22,-8,-26,-88,-3,-73,-6,27,23,-25,-88,51,-74,-54,18,-64, -62,-46,-65,-114,-74,45,-33,24,-66,-28,-50,-33,-47,-31,27,-55,-38,-2,8,-83,-77,-85,-64,-27,-49,25,-13,-29,-70,-48,-22,35, 
  /* [29][0][][] */ -40,-38,-65,24,-23,17,61,33,-3,-5,-59,19,39,-51,-8,-74,5,-10,-52,-28,54,-105,-35,-25,70,-97,-69,-127,-13,-54,-84,-10, -34,62,-29,-62,-57,71,32,48,-74,-25,-47,-31,-78,-106,-24,-59,-39,39,39,-48,-65,33,27,-26,42,-57,34,-66,-29,42,-108,-73, 34,-34,-27,51,-70,34,-7,33,-23,-41,-26,-8,-8,-65,-19,-47,-65,-89,31,25,-75,-99,-75,28,45,-32,-90,9,-45,-107,-68,32, 
  /* [30][0][][] */ 14,-1,36,-53,0,-6,16,64,-5,32,21,21,7,8,78,-9,70,-15,-55,-73,-85,-46,18,-39,-5,35,30,-5,7,31,-5,2, 55,-64,-22,37,-16,-46,22,5,42,-18,67,4,-39,35,7,-52,13,26,4,-46,-66,-105,4,-43,-25,-14,-94,59,52,37,-33,29, -44,-23,14,-55,-58,-28,-20,-9,37,-8,67,-23,50,7,-4,48,15,54,-127,-33,5,-8,2,-46,-22,-9,-7,-75,-24,26,30,41, 
  /* [31][0][][] */ 127,64,24,2,-21,-84,22,23,13,-16,103,-30,77,-16,10,1,14,-41,9,-103,-12,-88,35,-45,41,39,-115,-65,33,-14,-37,-42, -20,101,50,72,49,-96,49,-14,22,3,92,39,19,70,62,-17,95,39,-52,-81,-45,-60,-36,-83,-35,11,31,17,18,-5,-20,-35, 49,-10,48,-35,2,-49,-16,52,-22,-73,74,-12,70,21,-5,12,-11,29,-13,-26,0,-25,81,-47,43,7,-29,11,-36,35,19,15, 
  /* [32][0][][] */ -30,17,-79,7,-62,4,104,-40,15,-125,-109,55,56,28,-63,-69,-39,-16,8,-20,7,-18,-74,1,-49,27,40,-49,-20,119,-20,35, -104,68,70,-98,26,-41,-29,56,-42,-78,-32,-8,46,-63,-46,-56,-79,53,-56,-66,-57,8,-61,0,-10,-108,-10,8,25,56,-127,38, -11,4,60,-114,37,-84,73,-91,-89,-29,-55,47,-32,40,-71,50,28,3,-19,-102,1,-77,-67,-20,-7,33,24,-53,34,-106,3,-65, 
  /* [33][0][][] */ 35,18,-69,-47,48,18,8,-86,-50,-79,42,0,42,-42,-19,-68,33,-84,25,-92,-46,7,-8,47,54,-23,-45,-23,-89,40,-67,-8, -12,4,33,-59,18,-91,-41,-34,40,-67,-54,-101,29,-14,-13,6,5,-15,9,14,-28,-69,-71,-87,43,-104,-63,36,-62,12,-51,-17, 9,-8,-72,-59,-65,-24,-37,42,-127,-23,-66,5,-23,-68,-73,-118,-51,-14,-54,-67,-88,-20,-42,-47,-84,40,-25,-85,-57,46,-6,-59, 
  /* [34][0][][] */ -17,-61,-24,-55,-57,-2,-51,3,40,-35,26,-34,54,23,-5,-19,-22,20,-36,-60,-28,12,9,-61,-53,31,-29,-36,-42,-17,11,-30, -55,12,-13,-28,1,-6,-1,-46,-19,33,-9,45,-15,-15,-59,-105,-38,-64,-7,-4,-13,-9,-5,-19,51,0,52,-5,-30,-40,28,-49, -42,-8,-93,-57,40,-45,-33,-57,-19,11,-50,15,-65,-43,34,40,67,-39,22,23,54,-92,12,17,-70,-64,-10,-127,-10,-19,-33,-37, 
  /* [35][0][][] */ -39,127,16,-61,58,112,20,31,-45,-39,-31,-42,-37,-54,-51,-67,-33,-80,49,-19,-43,-20,-43,-86,-11,-27,-16,-53,-13,7,-49,39, 2,37,-58,-30,75,24,-4,23,-52,57,-6,-50,-56,-26,-19,-5,-39,-77,-18,65,32,-19,-41,-67,-65,-51,30,56,-70,-24,-60,7, -67,35,-12,-63,-21,-32,-74,19,-25,-6,-11,-42,-106,56,-17,60,11,32,37,12,77,48,-62,-16,81,-10,1,-13,66,-34,-100,30, 
  /* [36][0][][] */ -6,46,-12,-59,16,-34,31,-19,5,-127,-53,29,17,-17,4,29,-1,-6,-8,45,-37,-6,21,16,-55,-29,-10,-42,-29,28,-4,27, 41,34,78,-16,-17,-54,2,10,-69,-77,-57,-17,45,-28,29,5,39,-59,-53,-8,-33,-23,15,-26,-46,-46,47,-10,-36,-24,42,-45, 102,-19,59,21,19,1,37,-12,-43,47,-40,-6,-73,16,4,-71,-48,-62,71,-32,-29,-31,31,58,-11,-4,-55,-8,60,22,-84,-24, 
  /* [37][0][][] */ 31,-24,-50,-23,-6,11,16,28,-64,10,14,-22,-46,26,13,23,-56,-5,-14,46,-14,-30,25,-12,-4,-49,-3,-51,-87,-38,-81,-12, -53,39,-23,-72,-2,-27,-20,-9,-12,-51,-45,0,-29,-19,-25,11,-100,-21,37,-5,52,43,-50,-58,30,20,1,-127,-78,18,-51,-41, 18,-32,-7,21,8,12,2,-25,11,-31,17,8,28,-9,18,3,14,93,-36,-16,-8,22,-24,-20,52,-41,-71,12,4,-22,23,-9, 
  /* [38][0][][] */ -45,0,-34,6,24,-9,24,12,14,-32,45,7,-18,-17,37,-64,14,-66,-14,-25,-105,-28,12,-127,12,-7,-47,-59,-19,-15,7,16, -28,-26,4,-65,-54,-57,1,-7,-9,17,-6,33,25,-51,-37,-23,24,-12,-7,-87,-17,-61,-50,-78,-29,-15,-31,-37,-55,12,-46,-34, 51,-27,-36,49,-2,6,-21,-8,-57,36,7,1,-16,16,-4,-66,-13,-35,-67,-100,-41,-6,-20,-35,9,-60,-33,-15,23,-13,6,3, 
  /* [39][0][][] */ 68,65,-56,-68,87,65,-84,43,-83,-49,0,-94,18,73,-31,-105,-56,-42,48,51,-82,-60,66,27,-63,-10,-75,-58,-70,21,7,-7, 14,38,-33,-75,-33,-83,-84,-69,-14,2,-67,-76,-14,-78,73,-75,33,-91,-42,33,33,-119,22,-55,18,-89,-52,-1,-48,95,-92,-12, -43,-44,-16,-64,-46,-13,45,20,10,35,51,-67,-8,18,58,-42,-18,-8,-96,-30,-100,-127,-96,50,-99,-97,-46,-106,29,90,50,-58, 
  /* [40][0][][] */ 21,71,-93,-127,26,-117,-70,-13,-64,-51,-35,61,27,-37,-87,9,51,-28,-65,-14,-8,-17,-90,-68,21,50,-42,-55,20,62,-51,-102, -20,-41,-116,24,16,-69,-53,15,48,-43,19,45,-71,10,-16,-24,42,-50,-69,-38,38,-96,-77,-37,-10,-80,55,-87,18,-47,-51,49, 53,-73,-61,-64,52,28,-75,-66,61,76,23,15,23,-95,12,-7,-15,-60,-61,-83,-29,-4,9,16,-16,0,39,-103,19,-53,29,53, 
  /* [41][0][][] */ -90,-91,42,-22,61,-91,13,-94,-74,-27,-1,-46,-50,-50,29,-84,-4,-67,31,-127,-63,-34,-7,-46,27,34,44,-51,-56,-38,-122,-3, -98,9,9,-9,-10,24,-2,17,49,-12,50,-15,58,13,56,-67,-64,-68,16,-97,65,-76,74,-23,-123,-68,-4,-88,-12,45,-6,-24, -89,31,-36,-121,-53,29,-33,59,11,-54,106,39,-4,-16,41,-69,-10,79,64,-79,50,-103,-59,25,27,15,-105,-17,-65,49,-79,71, 
  /* [42][0][][] */ 84,54,-21,-111,11,-35,-37,26,33,-105,14,-31,29,-32,18,-47,-127,-45,-62,-122,-112,-107,-106,-26,-33,-23,-62,33,-16,18,-55,-82, 28,81,-53,-38,-44,24,-71,11,-48,-46,-61,17,-18,53,14,-63,-29,-70,32,-79,46,-65,-25,-41,4,-28,6,-55,-25,-11,2,-17, 16,82,-69,-119,92,-96,-64,65,-42,1,49,55,-118,-3,-56,43,35,-12,58,10,2,-59,28,-63,44,33,67,54,-48,29,-64,-57, 
  /* [43][0][][] */ -41,1,-94,-40,-26,35,-41,1,-53,-19,-2,25,-79,54,-16,20,17,-28,31,-21,5,-11,-39,31,-14,-57,-57,-24,45,8,9,1, -53,70,-34,-121,54,2,28,22,-49,-36,-81,5,-54,82,-4,15,-103,31,27,69,63,99,-30,-121,100,-60,-75,-105,-41,59,-5,16, -127,18,-61,-4,48,41,-33,18,-15,-44,24,18,2,46,0,-43,-6,120,-25,-46,-29,-2,11,-42,-39,-62,-56,-92,-9,54,-2,33, 
  /* [44][0][][] */ 60,-31,22,-28,-15,41,-5,-31,13,11,21,43,-1,-92,20,-45,-61,1,0,-76,-78,-74,-38,-86,-30,-44,21,-2,25,-7,12,-6, -127,49,11,-17,45,-68,37,-44,-71,23,9,7,-51,-22,24,-40,-43,-72,26,25,-31,-35,10,-13,19,-28,33,-36,-21,-1,-10,3, -10,23,13,30,17,12,-23,20,-80,28,36,37,-41,7,17,38,37,-2,-29,-36,-3,-21,-10,-5,-13,5,-25,44,48,24,31,49, 
  /* [45][0][][] */ 11,36,127,15,30,-44,27,-35,22,64,29,-18,24,57,70,-63,107,-16,-47,-95,-60,-60,51,55,9,11,76,-19,64,56,-45,31, 42,3,40,31,26,-7,52,-9,65,51,15,32,53,-42,-31,-12,-36,50,12,5,-118,-8,-1,-57,-33,-72,-24,47,-1,-50,-79,9, -89,-37,-69,-106,-3,-20,23,-27,58,-107,-6,31,100,43,19,50,54,21,5,-27,-10,26,65,-99,14,38,-104,-38,-35,-21,30,-9, 
  /* [46][0][][] */ -44,58,-127,-3,62,-27,40,-20,-8,-21,49,-26,-29,64,-24,5,-2,9,-9,-11,7,38,27,49,-62,-3,-58,-39,-24,70,-13,-9, -7,-93,-32,-32,8,-27,50,52,-94,21,-51,35,-88,15,-68,-29,-58,6,80,72,18,66,-39,59,59,-34,53,-87,-54,19,-89,6, -93,19,-35,-82,-72,102,-32,-19,-53,-113,-107,-51,-51,-35,25,30,-9,55,22,8,34,25,-55,-34,-36,-52,-28,-107,-37,53,37,43, 
  /* [47][0][][] */ -48,49,-22,-6,-119,-1,-64,26,-48,-99,19,75,35,67,-24,-45,-72,-27,44,-31,-81,25,39,-68,-6,-96,112,-8,-127,6,-21,-122, 31,-104,-62,-82,-106,18,6,39,-63,43,-60,-26,38,-13,11,-75,-99,37,-112,-123,-64,18,25,13,9,64,3,89,45,-54,-115,60, -84,-53,36,-21,-66,79,-75,-68,-19,-30,-105,-107,-117,-24,67,44,46,84,66,74,-77,2,-34,-24,-85,-100,-42,0,2,30,-66,83, 
  /* [48][0][][] */ -48,39,-63,-106,29,-62,-23,-63,-11,-106,-56,28,-6,17,45,-75,-19,31,-6,-121,6,-28,9,-38,1,-56,43,-127,-86,41,-100,-37, -50,57,37,-59,-27,4,22,22,-90,44,-78,3,-31,-79,-29,-47,-30,-42,-47,-40,45,-16,56,-14,-10,2,9,-54,-34,41,-40,53, -78,-12,9,-65,35,33,-5,21,102,-22,-56,-11,-48,14,20,67,67,23,18,67,-21,29,-5,-109,-49,45,-26,-36,5,2,-24,28, 
  /* [49][0][][] */ -20,-15,-82,-26,55,-41,-48,56,-62,66,-31,22,-81,-127,-15,43,-8,-106,37,-8,1,84,-27,-83,29,-38,-42,-120,-34,27,8,61, -75,-50,-79,-56,-8,-39,-13,12,-27,-8,-5,58,-25,35,8,9,-121,-77,69,59,36,-9,26,-32,42,-89,-7,-51,-61,-8,-59,-4, 20,-1,-29,-59,0,59,24,67,-62,-38,-14,-21,-66,69,-15,57,-115,-62,21,49,43,45,-52,-14,28,-97,-48,-17,51,-58,7,3, 
  /* [50][0][][] */ -95,-83,-49,-53,-9,-3,10,57,-7,-30,-127,-46,56,-29,-40,15,-45,-26,42,21,71,31,46,71,78,31,41,-20,-87,47,39,-16, 43,-10,52,-12,-12,-25,27,-4,5,-25,31,-33,31,-6,-12,-56,15,-47,-109,-57,-58,-4,-21,17,-21,-55,68,-19,15,17,-30,-21, -53,-40,1,7,-44,13,-24,-65,-17,27,29,-26,-29,-7,0,-3,2,-75,-11,-28,-36,-19,-3,-26,-31,-77,-77,5,-7,-6,-101,-41, 
  /* [51][0][][] */ -90,-2,-92,39,83,27,1,17,60,48,25,-13,-61,-35,-48,73,81,67,26,-11,91,9,14,15,-51,-3,57,40,-36,23,-67,-41, -41,2,-21,-57,-5,-127,-1,-38,36,26,-30,17,-80,-24,-10,-3,-32,24,100,90,77,31,-24,26,18,-10,-32,-28,-7,-10,-121,27, -51,-8,20,-64,-5,40,17,29,-56,8,-8,-25,-44,-18,1,0,-51,37,41,-3,66,-46,25,24,-62,13,-75,-31,36,-58,-77,22, 
  /* [52][0][][] */ -23,15,-112,-60,15,-98,7,-9,19,2,38,-38,-38,-56,5,26,-44,-3,-5,57,99,-13,24,-62,-29,-24,-77,-34,-12,10,-86,49, -127,-4,-9,5,50,-26,-11,-40,34,37,-10,-5,-53,-34,-53,-41,-8,25,7,-35,-45,-30,-30,-73,-28,-45,-69,35,-78,2,-62,7, -46,-66,13,-62,39,-83,-9,-34,0,59,-26,6,-16,11,6,-51,-4,-28,-49,23,23,2,37,-82,24,-12,1,-15,-19,53,-51,-36, 
  /* [53][0][][] */ 127,28,28,16,30,22,-18,15,0,29,56,8,8,25,-14,-39,-19,-33,-18,-36,-43,4,-6,-26,-10,22,-22,-4,7,-25,-15,-3, -13,-3,-36,-8,22,-2,7,-26,39,39,35,33,4,3,-19,21,17,-12,-44,-25,-49,-44,26,-8,-8,33,-11,-1,11,-18,11,-7, 46,3,-11,-32,-25,-38,-14,13,23,-69,-4,23,41,-3,35,44,-3,36,21,-17,14,-11,15,-45,-13,5,18,-24,-3,31,12,-11, 
  /* [54][0][][] */ 71,37,-24,119,64,-23,-53,-53,-10,40,84,-5,-15,-75,-44,-70,-126,1,9,-33,-55,-113,33,-46,49,-9,-55,-32,84,-2,-12,-54, 0,54,-37,-123,-38,-28,9,37,93,-127,115,29,62,26,72,-6,74,70,-50,-80,-45,-21,56,-116,13,43,-78,-28,15,28,35,40, 21,59,45,-32,-34,-51,-35,53,-36,-33,-1,7,92,-35,38,-21,-21,54,17,28,-33,34,11,-108,-76,30,43,-71,-20,-30,8,33, 
  /* [55][0][][] */ 20,-17,-95,-53,-43,-45,15,-34,-31,-33,87,13,-127,-32,14,14,-28,-24,-9,-40,73,57,-5,8,-31,-45,35,-32,-42,-4,-30,-58, -94,-32,-9,-36,-44,61,-21,-39,-31,-33,8,13,-84,15,36,-19,14,-41,104,60,67,51,-21,-49,31,-23,-99,-63,52,-45,26,45, 21,-11,-115,-69,14,10,-15,48,-48,33,-69,41,-5,-17,-34,24,-25,34,55,32,-22,80,19,20,35,78,4,-21,-23,47,-48,34, 
  /* [56][0][][] */ -14,-14,-100,-37,1,34,4,-2,-31,-8,-26,50,8,-34,-51,40,32,20,25,50,40,50,-61,-101,-33,3,-19,-78,-42,-22,-31,-40, -127,-33,-60,-2,-54,-34,5,38,-53,11,-1,-37,-46,-14,22,-15,-12,-32,-24,53,14,-1,-6,-111,4,-13,-34,6,28,-16,-31,-10, -57,-29,-9,-65,-5,47,57,61,-26,23,32,-15,-4,-62,-46,29,17,-51,39,74,33,-8,4,-107,-55,18,-59,-64,65,-34,4,-1, 
  /* [57][0][][] */ 127,45,-8,25,15,-44,25,-25,-18,74,41,-4,-111,25,-19,-35,-38,-61,-5,-7,-95,-39,6,12,12,-42,-13,-13,5,21,-46,-7, 7,29,27,-11,-12,-75,-36,22,36,-69,-25,-5,-6,-28,21,16,65,27,-71,-1,13,-24,-14,-36,10,31,28,-19,-14,5,38,-4, 38,32,12,22,-28,37,-30,-30,6,5,12,19,45,-3,21,-27,-28,-5,-29,15,-36,-7,-3,-23,5,12,25,15,-16,-14,21,14, 
  /* [58][0][][] */ -54,-62,-3,-92,57,-20,60,14,3,20,-127,-39,-67,-81,-18,-1,-78,41,2,-12,-24,-32,15,-26,-78,-10,-63,-10,-76,48,13,-51, 12,-31,13,87,-34,-39,-5,-76,-43,109,38,14,20,14,-45,-103,31,53,-13,-22,-60,-57,-36,2,36,-77,-23,-64,-32,13,-19,-20, -35,35,1,-63,92,-35,-40,11,57,-62,19,-32,-18,-39,67,-58,15,12,-12,9,45,-50,62,-50,-4,32,10,-53,-79,25,-91,32, 
  /* [59][0][][] */ -1,-101,2,-127,-53,15,-87,-42,-105,-70,-53,-99,61,-33,35,-95,8,8,52,-82,1,-72,30,-21,-101,9,-21,-26,49,-13,-61,-43, -46,-74,-24,24,-77,-70,71,36,-7,0,4,30,-26,-67,-29,0,18,-24,31,53,-18,-72,-18,-46,49,2,-12,-18,-70,66,-35,7, 23,81,-59,-81,37,-84,-60,-56,47,-22,-23,11,-10,-63,-104,-76,-117,-30,-16,-100,28,-34,27,-49,-102,38,-86,-112,-83,-15,-104,-75, 
  /* [60][0][][] */ 90,-7,36,-7,33,-82,18,20,34,-127,56,33,47,-58,-39,-32,28,53,-28,-10,-38,-58,43,-112,8,9,-8,-2,17,-14,36,6, 123,-4,19,20,-31,-22,16,-15,37,39,71,5,70,36,-53,-45,-98,-24,28,-28,-21,-58,29,-55,61,-1,0,-29,10,13,-8,-41, 31,10,35,44,-20,36,-11,18,-9,65,53,7,39,42,-35,-9,-63,24,20,-50,-72,-34,-43,64,-34,7,31,-33,-30,-10,2,-43, 
  /* [61][0][][] */ 2,7,31,-93,-1,-74,-34,-6,22,-127,-22,19,64,-23,-4,58,-20,57,3,-35,-30,1,-17,-104,-18,47,-40,10,-43,36,27,33, 59,-14,38,-14,-1,-13,21,-11,-34,16,76,18,54,1,-42,-27,-63,14,-34,23,-51,19,-2,-7,30,30,11,-36,-55,23,-34,-38, 8,-34,33,18,25,25,39,13,-12,28,39,-47,-17,-12,24,-2,-78,34,6,-63,-28,-28,-38,38,-36,-10,4,4,12,-25,20,21, 
  /* [62][0][][] */ 127,41,48,-17,-32,-31,49,1,50,-17,68,0,18,-7,29,-10,73,25,-49,-19,-30,-49,5,-64,-11,14,-7,1,1,19,4,3, 54,33,-15,21,-5,60,24,-30,0,-36,59,-21,57,16,-10,-42,-55,-11,23,-1,9,-9,-45,21,-38,-18,23,-38,20,-33,0,27, 31,-26,15,-22,-13,-10,16,-34,32,-37,-13,13,13,-1,-6,-20,8,-27,-2,-27,2,-24,8,8,-11,-17,-37,14,-49,13,-2,-29, 
  /* [63][0][][] */ 9,14,-30,-96,-62,-68,-54,-34,-74,52,-21,18,-95,32,38,-58,46,-51,4,-67,-3,19,-70,13,-17,-65,39,7,16,-32,15,5, 51,14,-27,-17,41,-44,-28,-1,36,46,66,48,-56,18,-67,-127,37,-94,-54,-110,-91,-21,26,27,-23,41,9,-12,-29,33,26,14, -56,4,-102,59,9,25,-21,-50,-29,-56,57,-20,-11,74,14,-101,-75,21,36,-32,-20,-66,1,-38,-32,9,21,-44,28,21,34,16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant11_scale = { 64, { 0.0034133032895624638, 0.0019311300711706281, 0.0023858877830207348, 0.003624605480581522, 0.0026868907734751701, 0.0018961308524012566, 0.0027187028899788857, 0.0033585727214813232, 0.0049738567322492599, 0.0042409272864460945, 0.0036926118191331625, 0.0019208869198337197, 0.0017985805170610547, 0.0020982376299798489, 0.0026694571133702993, 0.00244752480648458, 0.0045489915646612644, 0.0029487765859812498, 0.0020834784954786301, 0.0032908490393310785, 0.0046071643009781837, 0.0019926954992115498, 0.0040704398415982723, 0.0014647023053839803, 0.0038186849560588598, 0.0043527497909963131, 0.0028667070437222719, 0.0026001934893429279, 0.0022012284025549889, 0.0016582077369093895, 0.0030981390736997128, 0.002272729529067874, 0.001541164587251842, 0.0018403392750769854, 0.003304383484646678, 0.0027857476379722357, 0.0039461744017899036, 0.0041947448626160622, 0.0027688888367265463, 0.0014608526835218072, 0.0015207168180495501, 0.0015415782108902931, 0.0017359607154503465, 0.0028760891873389482, 0.0031076062005013227, 0.0021441492717713118, 0.0029615594539791346, 0.0015072331298142672, 0.0028505728114396334, 0.0024086425546556711, 0.0034735370427370071, 0.003636527806520462, 0.0024159450549632311, 0.0053212447091937065, 0.0028278462123125792, 0.0026982168201357126, 0.0030970668885856867, 0.0044960114173591137, 0.0021811411716043949, 0.0015460982685908675, 0.0031213078182190657, 0.0035596499219536781, 0.0041090613231062889, 0.0022019166499376297, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[4] = { 1, 1, 13, 65, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data13[4] = { 1, 13, 1, 16, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data14[4] = { 1, 1, 7, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data15[4] = { 1, 7, 1, 32, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data16[4] = { 1, 1, 4, 32, };
const TfArray<1, int> tensor_dimension16 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data17[4] = { 1, 4, 1, 64, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,13,65 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,13,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.016443567350506783, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.016443567350506783, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,7,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.016443567350506783, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,7,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.016443567350506783, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,7,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.012242788448929787, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,7,1,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.012242788448929787, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,4,1,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.012242788448929787, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,4,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.012242788448929787, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,4,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.01081057358533144, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,4,1,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.01081057358533144, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,2,1,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.01081057358533144, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,128 } };
const TfArray<1, float> quant30_scale = { 1, { 0.01081057358533144, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.028795674443244934, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,2 } };
const TfArray<1, float> quant32_scale = { 1, { 0.088676825165748596, } };
const TfArray<1, int> quant32_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,2 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,12 } };
const TfArray<1, int> outputs0 = { 1, { 18 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 18,9,2 } };
const TfArray<1, int> outputs1 = { 1, { 19 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 19,13 } };
const TfArray<1, int> outputs2 = { 1, { 20 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 20 } };
const TfArray<1, int> outputs3 = { 1, { 21 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 21,14 } };
const TfArray<1, int> outputs4 = { 1, { 22 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 22,10,3 } };
const TfArray<1, int> outputs5 = { 1, { 23 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 23,15 } };
const TfArray<1, int> outputs6 = { 1, { 24 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 24 } };
const TfArray<1, int> outputs7 = { 1, { 25 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 25,16 } };
const TfArray<1, int> outputs8 = { 1, { 26 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 26,11,4 } };
const TfArray<1, int> outputs9 = { 1, { 27 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 27,17 } };
const TfArray<1, int> outputs10 = { 1, { 28 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 28 } };
const TfArray<1, int> outputs11 = { 1, { 29 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 29,1 } };
const TfArray<1, int> outputs12 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 30,7,5 } };
const TfArray<1, int> outputs13 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata14 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs14 = { 3, { 31,8,6 } };
const TfArray<1, int> outputs14 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata15 = { 1 };
const TfArray<1, int> inputs15 = { 1, { 32 } };
const TfArray<1, int> outputs15 = { 1, { 33 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 848, (TfLiteIntArray*)&tensor_dimension0, 845, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 845, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1632, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension22, 112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension23, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension25, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 640, (TfLiteIntArray*)&tensor_dimension26, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension27, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension29, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension32, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 34;
  for(size_t i = 0; i < 34; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 16; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 16; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  33, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 16; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
